/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CertificateSignerMockInterface extends utils.Interface {
  functions: {
    "addCertificateSigner(address,address)": FunctionFragment;
    "isCertificateSigner(address,address)": FunctionFragment;
    "removeCertificateSigner(address,address)": FunctionFragment;
    "renounceCertificateSigner(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addCertificateSigner",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isCertificateSigner",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCertificateSigner",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceCertificateSigner",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addCertificateSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCertificateSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCertificateSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceCertificateSigner",
    data: BytesLike
  ): Result;

  events: {
    "CertificateSignerAdded(address,address)": EventFragment;
    "CertificateSignerRemoved(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CertificateSignerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CertificateSignerRemoved"): EventFragment;
}

export type CertificateSignerAddedEvent = TypedEvent<
  [string, string],
  { token: string; account: string }
>;

export type CertificateSignerAddedEventFilter =
  TypedEventFilter<CertificateSignerAddedEvent>;

export type CertificateSignerRemovedEvent = TypedEvent<
  [string, string],
  { token: string; account: string }
>;

export type CertificateSignerRemovedEventFilter =
  TypedEventFilter<CertificateSignerRemovedEvent>;

export interface CertificateSignerMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CertificateSignerMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addCertificateSigner(
      token: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isCertificateSigner(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeCertificateSigner(
      token: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceCertificateSigner(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addCertificateSigner(
    token: string,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isCertificateSigner(
    token: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeCertificateSigner(
    token: string,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceCertificateSigner(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addCertificateSigner(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isCertificateSigner(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeCertificateSigner(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceCertificateSigner(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CertificateSignerAdded(address,address)"(
      token?: string | null,
      account?: string | null
    ): CertificateSignerAddedEventFilter;
    CertificateSignerAdded(
      token?: string | null,
      account?: string | null
    ): CertificateSignerAddedEventFilter;

    "CertificateSignerRemoved(address,address)"(
      token?: string | null,
      account?: string | null
    ): CertificateSignerRemovedEventFilter;
    CertificateSignerRemoved(
      token?: string | null,
      account?: string | null
    ): CertificateSignerRemovedEventFilter;
  };

  estimateGas: {
    addCertificateSigner(
      token: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isCertificateSigner(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeCertificateSigner(
      token: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceCertificateSigner(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addCertificateSigner(
      token: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isCertificateSigner(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeCertificateSigner(
      token: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceCertificateSigner(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
