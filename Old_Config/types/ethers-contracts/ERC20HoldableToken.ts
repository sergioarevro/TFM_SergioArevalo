/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type ERC20HoldDataStruct = {
  sender: string;
  recipient: string;
  notary: string;
  amount: BigNumberish;
  expirationDateTime: BigNumberish;
  secretHash: BytesLike;
  status: BigNumberish;
};

export type ERC20HoldDataStructOutput = [
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  string,
  number
] & {
  sender: string;
  recipient: string;
  notary: string;
  amount: BigNumber;
  expirationDateTime: BigNumber;
  secretHash: string;
  status: number;
};

export interface ERC20HoldableTokenInterface extends utils.Interface {
  functions: {
    "addMinter(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "canImplementInterfaceForAddress(bytes32,address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "isMinter(address)": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "removeMinter(address)": FunctionFragment;
    "renounceMinter()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalSupplyOnHold()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "generateHoldId(address,address,uint256,uint256,bytes32)": FunctionFragment;
    "retrieveHoldHashId(address,address,address,uint256)": FunctionFragment;
    "hold(bytes32,address,address,uint256,uint256,bytes32)": FunctionFragment;
    "retrieveHoldData(bytes32)": FunctionFragment;
    "executeHold(bytes32,bytes32)": FunctionFragment;
    "releaseHold(bytes32)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balanceOnHold(address)": FunctionFragment;
    "spendableBalanceOf(address)": FunctionFragment;
    "holdStatus(bytes32)": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "burnFrom(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addMinter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "canImplementInterfaceForAddress",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isMinter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeMinter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceMinter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyOnHold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "generateHoldId",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveHoldHashId",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hold",
    values: [BytesLike, string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveHoldData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeHold",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseHold",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "balanceOnHold",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "spendableBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "holdStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addMinter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canImplementInterfaceForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMinter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyOnHold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateHoldId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveHoldHashId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "retrieveHoldData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeHold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseHold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOnHold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spendableBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "holdStatus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ExecutedHold(bytes32,bytes32,address)": EventFragment;
    "MinterAdded(address)": EventFragment;
    "MinterRemoved(address)": EventFragment;
    "NewHold(bytes32,address,address,uint256,uint256,bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "ReleaseHold(bytes32,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutedHold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinterAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinterRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewHold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReleaseHold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ExecutedHoldEvent = TypedEvent<
  [string, string, string],
  { holdId: string; lockPreimage: string; recipient: string }
>;

export type ExecutedHoldEventFilter = TypedEventFilter<ExecutedHoldEvent>;

export type MinterAddedEvent = TypedEvent<[string], { account: string }>;

export type MinterAddedEventFilter = TypedEventFilter<MinterAddedEvent>;

export type MinterRemovedEvent = TypedEvent<[string], { account: string }>;

export type MinterRemovedEventFilter = TypedEventFilter<MinterRemovedEvent>;

export type NewHoldEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, string],
  {
    holdId: string;
    recipient: string;
    notary: string;
    amount: BigNumber;
    expirationDateTime: BigNumber;
    lockHash: string;
  }
>;

export type NewHoldEventFilter = TypedEventFilter<NewHoldEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type ReleaseHoldEvent = TypedEvent<
  [string, string],
  { holdId: string; sender: string }
>;

export type ReleaseHoldEventFilter = TypedEventFilter<ReleaseHoldEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface ERC20HoldableToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC20HoldableTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addMinter(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * See {IERC20-allowance}.
     */
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.
     */
    decimals(overrides?: CallOverrides): Promise<[number]>;

    /**
     * Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.
     */
    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.
     */
    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isMinter(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    /**
     * Function to mint tokens
     * @param to The address that will receive the minted tokens.
     * @param value The amount of tokens to mint.
     */
    mint(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns the name of the token.
     */
    name(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(overrides?: CallOverrides): Promise<[boolean]>;

    removeMinter(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceMinter(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns the symbol of the token, usually a shorter version of the name.
     */
    symbol(overrides?: CallOverrides): Promise<[string]>;

    /**
     * See {IERC20-totalSupply}.
     */
    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupplyOnHold(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    generateHoldId(
      recipient: string,
      notary: string,
      amount: BigNumberish,
      expirationDateTime: BigNumberish,
      lockHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { holdId: string }>;

    /**
     * Retrieve hold hash, and ID for given parameters
     */
    retrieveHoldHashId(
      notary: string,
      sender: string,
      recipient: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    /**
     * Called by the sender to hold some tokens for a recipient that the sender can not release back to themself until after the expiration date.
     * @param amount of tokens to be transferred to the recipient on execution. Must be a non zero amount.
     * @param expirationDateTime UNIX epoch seconds the held amount can be released back to the sender by the sender. Past dates are allowed.
     * @param holdId a unique identifier for the hold.
     * @param lockHash optional keccak256 hash of a lock preimage. An empty hash will not enforce the hash lock when the hold is executed.
     * @param notary account that can execute the hold. Typically the recipient but can be a third party or a smart contact.
     * @param recipient optional account the tokens will be transferred to on execution. If a zero address, the recipient must be specified on execution of the hold.
     */
    hold(
      holdId: BytesLike,
      recipient: string,
      notary: string,
      amount: BigNumberish,
      expirationDateTime: BigNumberish,
      lockHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    retrieveHoldData(
      holdId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[ERC20HoldDataStructOutput]>;

    /**
     * Called by the notary to transfer the held tokens to the recipient that was set at the hold.
     * @param holdId a unique identifier for the hold.
     * @param lockPreimage the image used to generate the lock hash with a sha256 hash
     */
    "executeHold(bytes32,bytes32)"(
      holdId: BytesLike,
      lockPreimage: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Called by the notary to transfer the held tokens to the recipient if no recipient was specified at the hold.
     * @param holdId a unique identifier for the hold.
     * @param lockPreimage the image used to generate the lock hash with a keccak256 hash
     * @param recipient the account the tokens will be transferred to on execution.
     */
    "executeHold(bytes32,bytes32,address)"(
      holdId: BytesLike,
      lockPreimage: BytesLike,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Called by the notary to transfer the held tokens to the set at the hold recipient if there is no hash lock.
     * @param holdId a unique identifier for the hold.
     */
    "executeHold(bytes32)"(
      holdId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Called by the notary at any time or the sender after the expiration date to release the held tokens back to the sender.
     * @param holdId a unique identifier for the hold.
     */
    releaseHold(
      holdId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Amount of tokens owned by an account that are available for transfer. That is, the gross balance less any held tokens.
     * @param account owner of the tokensß
     */
    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Amount of tokens owned by an account that are held pending execution or release.
     * @param account owner of the tokens
     */
    balanceOnHold(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Total amount of tokens owned by an account including all the held tokens pending execution or release.
     * @param account owner of the tokens
     */
    spendableBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * @param holdId a unique identifier for the hold.
     */
    holdStatus(holdId: BytesLike, overrides?: CallOverrides): Promise<[number]>;

    /**
     * ERC20 transfer that checks on hold tokens can not be transferred.
     */
    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * ERC20 transferFrom that checks on hold tokens can not be transferred.
     */
    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * ERC20 approve that checks on hold tokens can not be approved for spending by another account.
     */
    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * ERC20 burn that checks on hold tokens can not be burnt.
     */
    burn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * ERC20 burnFrom that checks on hold tokens can not be burnt.
     */
    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addMinter(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * See {IERC20-allowance}.
   */
  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  canImplementInterfaceForAddress(
    interfaceHash: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.
   */
  decimals(overrides?: CallOverrides): Promise<number>;

  /**
   * Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.
   */
  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.
   */
  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isMinter(account: string, overrides?: CallOverrides): Promise<boolean>;

  /**
   * Function to mint tokens
   * @param to The address that will receive the minted tokens.
   * @param value The amount of tokens to mint.
   */
  mint(
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns the name of the token.
   */
  name(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns true if the contract is paused, and false otherwise.
   */
  paused(overrides?: CallOverrides): Promise<boolean>;

  removeMinter(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceMinter(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns the symbol of the token, usually a shorter version of the name.
   */
  symbol(overrides?: CallOverrides): Promise<string>;

  /**
   * See {IERC20-totalSupply}.
   */
  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupplyOnHold(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  generateHoldId(
    recipient: string,
    notary: string,
    amount: BigNumberish,
    expirationDateTime: BigNumberish,
    lockHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Retrieve hold hash, and ID for given parameters
   */
  retrieveHoldHashId(
    notary: string,
    sender: string,
    recipient: string,
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string]>;

  /**
   * Called by the sender to hold some tokens for a recipient that the sender can not release back to themself until after the expiration date.
   * @param amount of tokens to be transferred to the recipient on execution. Must be a non zero amount.
   * @param expirationDateTime UNIX epoch seconds the held amount can be released back to the sender by the sender. Past dates are allowed.
   * @param holdId a unique identifier for the hold.
   * @param lockHash optional keccak256 hash of a lock preimage. An empty hash will not enforce the hash lock when the hold is executed.
   * @param notary account that can execute the hold. Typically the recipient but can be a third party or a smart contact.
   * @param recipient optional account the tokens will be transferred to on execution. If a zero address, the recipient must be specified on execution of the hold.
   */
  hold(
    holdId: BytesLike,
    recipient: string,
    notary: string,
    amount: BigNumberish,
    expirationDateTime: BigNumberish,
    lockHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  retrieveHoldData(
    holdId: BytesLike,
    overrides?: CallOverrides
  ): Promise<ERC20HoldDataStructOutput>;

  /**
   * Called by the notary to transfer the held tokens to the recipient that was set at the hold.
   * @param holdId a unique identifier for the hold.
   * @param lockPreimage the image used to generate the lock hash with a sha256 hash
   */
  "executeHold(bytes32,bytes32)"(
    holdId: BytesLike,
    lockPreimage: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Called by the notary to transfer the held tokens to the recipient if no recipient was specified at the hold.
   * @param holdId a unique identifier for the hold.
   * @param lockPreimage the image used to generate the lock hash with a keccak256 hash
   * @param recipient the account the tokens will be transferred to on execution.
   */
  "executeHold(bytes32,bytes32,address)"(
    holdId: BytesLike,
    lockPreimage: BytesLike,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Called by the notary to transfer the held tokens to the set at the hold recipient if there is no hash lock.
   * @param holdId a unique identifier for the hold.
   */
  "executeHold(bytes32)"(
    holdId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Called by the notary at any time or the sender after the expiration date to release the held tokens back to the sender.
   * @param holdId a unique identifier for the hold.
   */
  releaseHold(
    holdId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Amount of tokens owned by an account that are available for transfer. That is, the gross balance less any held tokens.
   * @param account owner of the tokensß
   */
  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Amount of tokens owned by an account that are held pending execution or release.
   * @param account owner of the tokens
   */
  balanceOnHold(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Total amount of tokens owned by an account including all the held tokens pending execution or release.
   * @param account owner of the tokens
   */
  spendableBalanceOf(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * @param holdId a unique identifier for the hold.
   */
  holdStatus(holdId: BytesLike, overrides?: CallOverrides): Promise<number>;

  /**
   * ERC20 transfer that checks on hold tokens can not be transferred.
   */
  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * ERC20 transferFrom that checks on hold tokens can not be transferred.
   */
  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * ERC20 approve that checks on hold tokens can not be approved for spending by another account.
   */
  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * ERC20 burn that checks on hold tokens can not be burnt.
   */
  burn(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * ERC20 burnFrom that checks on hold tokens can not be burnt.
   */
  burnFrom(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addMinter(account: string, overrides?: CallOverrides): Promise<void>;

    /**
     * See {IERC20-allowance}.
     */
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.
     */
    decimals(overrides?: CallOverrides): Promise<number>;

    /**
     * Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.
     */
    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.
     */
    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMinter(account: string, overrides?: CallOverrides): Promise<boolean>;

    /**
     * Function to mint tokens
     * @param to The address that will receive the minted tokens.
     * @param value The amount of tokens to mint.
     */
    mint(
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Returns the name of the token.
     */
    name(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(overrides?: CallOverrides): Promise<boolean>;

    removeMinter(account: string, overrides?: CallOverrides): Promise<void>;

    renounceMinter(overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Returns the symbol of the token, usually a shorter version of the name.
     */
    symbol(overrides?: CallOverrides): Promise<string>;

    /**
     * See {IERC20-totalSupply}.
     */
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyOnHold(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    generateHoldId(
      recipient: string,
      notary: string,
      amount: BigNumberish,
      expirationDateTime: BigNumberish,
      lockHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Retrieve hold hash, and ID for given parameters
     */
    retrieveHoldHashId(
      notary: string,
      sender: string,
      recipient: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    /**
     * Called by the sender to hold some tokens for a recipient that the sender can not release back to themself until after the expiration date.
     * @param amount of tokens to be transferred to the recipient on execution. Must be a non zero amount.
     * @param expirationDateTime UNIX epoch seconds the held amount can be released back to the sender by the sender. Past dates are allowed.
     * @param holdId a unique identifier for the hold.
     * @param lockHash optional keccak256 hash of a lock preimage. An empty hash will not enforce the hash lock when the hold is executed.
     * @param notary account that can execute the hold. Typically the recipient but can be a third party or a smart contact.
     * @param recipient optional account the tokens will be transferred to on execution. If a zero address, the recipient must be specified on execution of the hold.
     */
    hold(
      holdId: BytesLike,
      recipient: string,
      notary: string,
      amount: BigNumberish,
      expirationDateTime: BigNumberish,
      lockHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    retrieveHoldData(
      holdId: BytesLike,
      overrides?: CallOverrides
    ): Promise<ERC20HoldDataStructOutput>;

    /**
     * Called by the notary to transfer the held tokens to the recipient that was set at the hold.
     * @param holdId a unique identifier for the hold.
     * @param lockPreimage the image used to generate the lock hash with a sha256 hash
     */
    "executeHold(bytes32,bytes32)"(
      holdId: BytesLike,
      lockPreimage: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Called by the notary to transfer the held tokens to the recipient if no recipient was specified at the hold.
     * @param holdId a unique identifier for the hold.
     * @param lockPreimage the image used to generate the lock hash with a keccak256 hash
     * @param recipient the account the tokens will be transferred to on execution.
     */
    "executeHold(bytes32,bytes32,address)"(
      holdId: BytesLike,
      lockPreimage: BytesLike,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Called by the notary to transfer the held tokens to the set at the hold recipient if there is no hash lock.
     * @param holdId a unique identifier for the hold.
     */
    "executeHold(bytes32)"(
      holdId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Called by the notary at any time or the sender after the expiration date to release the held tokens back to the sender.
     * @param holdId a unique identifier for the hold.
     */
    releaseHold(holdId: BytesLike, overrides?: CallOverrides): Promise<void>;

    /**
     * Amount of tokens owned by an account that are available for transfer. That is, the gross balance less any held tokens.
     * @param account owner of the tokensß
     */
    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Amount of tokens owned by an account that are held pending execution or release.
     * @param account owner of the tokens
     */
    balanceOnHold(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Total amount of tokens owned by an account including all the held tokens pending execution or release.
     * @param account owner of the tokens
     */
    spendableBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * @param holdId a unique identifier for the hold.
     */
    holdStatus(holdId: BytesLike, overrides?: CallOverrides): Promise<number>;

    /**
     * ERC20 transfer that checks on hold tokens can not be transferred.
     */
    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * ERC20 transferFrom that checks on hold tokens can not be transferred.
     */
    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * ERC20 approve that checks on hold tokens can not be approved for spending by another account.
     */
    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * ERC20 burn that checks on hold tokens can not be burnt.
     */
    burn(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    /**
     * ERC20 burnFrom that checks on hold tokens can not be burnt.
     */
    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "ExecutedHold(bytes32,bytes32,address)"(
      holdId?: BytesLike | null,
      lockPreimage?: null,
      recipient?: null
    ): ExecutedHoldEventFilter;
    ExecutedHold(
      holdId?: BytesLike | null,
      lockPreimage?: null,
      recipient?: null
    ): ExecutedHoldEventFilter;

    "MinterAdded(address)"(account?: string | null): MinterAddedEventFilter;
    MinterAdded(account?: string | null): MinterAddedEventFilter;

    "MinterRemoved(address)"(account?: string | null): MinterRemovedEventFilter;
    MinterRemoved(account?: string | null): MinterRemovedEventFilter;

    "NewHold(bytes32,address,address,uint256,uint256,bytes32)"(
      holdId?: BytesLike | null,
      recipient?: string | null,
      notary?: string | null,
      amount?: null,
      expirationDateTime?: null,
      lockHash?: null
    ): NewHoldEventFilter;
    NewHold(
      holdId?: BytesLike | null,
      recipient?: string | null,
      notary?: string | null,
      amount?: null,
      expirationDateTime?: null,
      lockHash?: null
    ): NewHoldEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "ReleaseHold(bytes32,address)"(
      holdId?: BytesLike | null,
      sender?: null
    ): ReleaseHoldEventFilter;
    ReleaseHold(
      holdId?: BytesLike | null,
      sender?: null
    ): ReleaseHoldEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    addMinter(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * See {IERC20-allowance}.
     */
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.
     */
    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.
     */
    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.
     */
    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isMinter(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Function to mint tokens
     * @param to The address that will receive the minted tokens.
     * @param value The amount of tokens to mint.
     */
    mint(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Returns the name of the token.
     */
    name(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(overrides?: CallOverrides): Promise<BigNumber>;

    removeMinter(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceMinter(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Returns the symbol of the token, usually a shorter version of the name.
     */
    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {IERC20-totalSupply}.
     */
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyOnHold(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    generateHoldId(
      recipient: string,
      notary: string,
      amount: BigNumberish,
      expirationDateTime: BigNumberish,
      lockHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieve hold hash, and ID for given parameters
     */
    retrieveHoldHashId(
      notary: string,
      sender: string,
      recipient: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Called by the sender to hold some tokens for a recipient that the sender can not release back to themself until after the expiration date.
     * @param amount of tokens to be transferred to the recipient on execution. Must be a non zero amount.
     * @param expirationDateTime UNIX epoch seconds the held amount can be released back to the sender by the sender. Past dates are allowed.
     * @param holdId a unique identifier for the hold.
     * @param lockHash optional keccak256 hash of a lock preimage. An empty hash will not enforce the hash lock when the hold is executed.
     * @param notary account that can execute the hold. Typically the recipient but can be a third party or a smart contact.
     * @param recipient optional account the tokens will be transferred to on execution. If a zero address, the recipient must be specified on execution of the hold.
     */
    hold(
      holdId: BytesLike,
      recipient: string,
      notary: string,
      amount: BigNumberish,
      expirationDateTime: BigNumberish,
      lockHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    retrieveHoldData(
      holdId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Called by the notary to transfer the held tokens to the recipient that was set at the hold.
     * @param holdId a unique identifier for the hold.
     * @param lockPreimage the image used to generate the lock hash with a sha256 hash
     */
    "executeHold(bytes32,bytes32)"(
      holdId: BytesLike,
      lockPreimage: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Called by the notary to transfer the held tokens to the recipient if no recipient was specified at the hold.
     * @param holdId a unique identifier for the hold.
     * @param lockPreimage the image used to generate the lock hash with a keccak256 hash
     * @param recipient the account the tokens will be transferred to on execution.
     */
    "executeHold(bytes32,bytes32,address)"(
      holdId: BytesLike,
      lockPreimage: BytesLike,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Called by the notary to transfer the held tokens to the set at the hold recipient if there is no hash lock.
     * @param holdId a unique identifier for the hold.
     */
    "executeHold(bytes32)"(
      holdId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Called by the notary at any time or the sender after the expiration date to release the held tokens back to the sender.
     * @param holdId a unique identifier for the hold.
     */
    releaseHold(
      holdId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Amount of tokens owned by an account that are available for transfer. That is, the gross balance less any held tokens.
     * @param account owner of the tokensß
     */
    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Amount of tokens owned by an account that are held pending execution or release.
     * @param account owner of the tokens
     */
    balanceOnHold(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Total amount of tokens owned by an account including all the held tokens pending execution or release.
     * @param account owner of the tokens
     */
    spendableBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * @param holdId a unique identifier for the hold.
     */
    holdStatus(
      holdId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * ERC20 transfer that checks on hold tokens can not be transferred.
     */
    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * ERC20 transferFrom that checks on hold tokens can not be transferred.
     */
    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * ERC20 approve that checks on hold tokens can not be approved for spending by another account.
     */
    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * ERC20 burn that checks on hold tokens can not be burnt.
     */
    burn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * ERC20 burnFrom that checks on hold tokens can not be burnt.
     */
    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addMinter(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC20-allowance}.
     */
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.
     */
    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.
     */
    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.
     */
    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isMinter(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Function to mint tokens
     * @param to The address that will receive the minted tokens.
     * @param value The amount of tokens to mint.
     */
    mint(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the name of the token.
     */
    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeMinter(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceMinter(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the symbol of the token, usually a shorter version of the name.
     */
    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * See {IERC20-totalSupply}.
     */
    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyOnHold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    generateHoldId(
      recipient: string,
      notary: string,
      amount: BigNumberish,
      expirationDateTime: BigNumberish,
      lockHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieve hold hash, and ID for given parameters
     */
    retrieveHoldHashId(
      notary: string,
      sender: string,
      recipient: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Called by the sender to hold some tokens for a recipient that the sender can not release back to themself until after the expiration date.
     * @param amount of tokens to be transferred to the recipient on execution. Must be a non zero amount.
     * @param expirationDateTime UNIX epoch seconds the held amount can be released back to the sender by the sender. Past dates are allowed.
     * @param holdId a unique identifier for the hold.
     * @param lockHash optional keccak256 hash of a lock preimage. An empty hash will not enforce the hash lock when the hold is executed.
     * @param notary account that can execute the hold. Typically the recipient but can be a third party or a smart contact.
     * @param recipient optional account the tokens will be transferred to on execution. If a zero address, the recipient must be specified on execution of the hold.
     */
    hold(
      holdId: BytesLike,
      recipient: string,
      notary: string,
      amount: BigNumberish,
      expirationDateTime: BigNumberish,
      lockHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    retrieveHoldData(
      holdId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Called by the notary to transfer the held tokens to the recipient that was set at the hold.
     * @param holdId a unique identifier for the hold.
     * @param lockPreimage the image used to generate the lock hash with a sha256 hash
     */
    "executeHold(bytes32,bytes32)"(
      holdId: BytesLike,
      lockPreimage: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Called by the notary to transfer the held tokens to the recipient if no recipient was specified at the hold.
     * @param holdId a unique identifier for the hold.
     * @param lockPreimage the image used to generate the lock hash with a keccak256 hash
     * @param recipient the account the tokens will be transferred to on execution.
     */
    "executeHold(bytes32,bytes32,address)"(
      holdId: BytesLike,
      lockPreimage: BytesLike,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Called by the notary to transfer the held tokens to the set at the hold recipient if there is no hash lock.
     * @param holdId a unique identifier for the hold.
     */
    "executeHold(bytes32)"(
      holdId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Called by the notary at any time or the sender after the expiration date to release the held tokens back to the sender.
     * @param holdId a unique identifier for the hold.
     */
    releaseHold(
      holdId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Amount of tokens owned by an account that are available for transfer. That is, the gross balance less any held tokens.
     * @param account owner of the tokensß
     */
    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Amount of tokens owned by an account that are held pending execution or release.
     * @param account owner of the tokens
     */
    balanceOnHold(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Total amount of tokens owned by an account including all the held tokens pending execution or release.
     * @param account owner of the tokens
     */
    spendableBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * @param holdId a unique identifier for the hold.
     */
    holdStatus(
      holdId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * ERC20 transfer that checks on hold tokens can not be transferred.
     */
    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * ERC20 transferFrom that checks on hold tokens can not be transferred.
     */
    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * ERC20 approve that checks on hold tokens can not be approved for spending by another account.
     */
    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * ERC20 burn that checks on hold tokens can not be burnt.
     */
    burn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * ERC20 burnFrom that checks on hold tokens can not be burnt.
     */
    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
