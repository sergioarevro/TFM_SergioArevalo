/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IERC1400TokensValidatorExtendedInterface
  extends utils.Interface {
  functions: {
    "retrieveTokenSetup(address)": FunctionFragment;
    "spendableBalanceOfByPartition(address,bytes32,address)": FunctionFragment;
    "isAllowlisted(address,address)": FunctionFragment;
    "isBlocklisted(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "retrieveTokenSetup",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "spendableBalanceOfByPartition",
    values: [string, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowlisted",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isBlocklisted",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "retrieveTokenSetup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spendableBalanceOfByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAllowlisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBlocklisted",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IERC1400TokensValidatorExtended extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IERC1400TokensValidatorExtendedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    retrieveTokenSetup(
      token: string,
      overrides?: CallOverrides
    ): Promise<[number, boolean, boolean, boolean, boolean, string[]]>;

    spendableBalanceOfByPartition(
      token: string,
      partition: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isAllowlisted(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isBlocklisted(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  retrieveTokenSetup(
    token: string,
    overrides?: CallOverrides
  ): Promise<[number, boolean, boolean, boolean, boolean, string[]]>;

  spendableBalanceOfByPartition(
    token: string,
    partition: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isAllowlisted(
    token: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isBlocklisted(
    token: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    retrieveTokenSetup(
      token: string,
      overrides?: CallOverrides
    ): Promise<[number, boolean, boolean, boolean, boolean, string[]]>;

    spendableBalanceOfByPartition(
      token: string,
      partition: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAllowlisted(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isBlocklisted(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    retrieveTokenSetup(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    spendableBalanceOfByPartition(
      token: string,
      partition: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAllowlisted(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBlocklisted(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    retrieveTokenSetup(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    spendableBalanceOfByPartition(
      token: string,
      partition: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAllowlisted(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBlocklisted(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
