/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IHoldableERC1400TokenExtensionInterface
  extends utils.Interface {
  functions: {
    "executeHold(address,bytes32,uint256,bytes32)": FunctionFragment;
    "retrieveHoldData(address,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "executeHold",
    values: [string, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveHoldData",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "executeHold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveHoldData",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IHoldableERC1400TokenExtension extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IHoldableERC1400TokenExtensionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    executeHold(
      token: string,
      holdId: BytesLike,
      value: BigNumberish,
      lockPreimage: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    retrieveHoldData(
      token: string,
      holdId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        number
      ] & {
        partition: string;
        sender: string;
        recipient: string;
        notary: string;
        value: BigNumber;
        expiration: BigNumber;
        secretHash: string;
        secret: string;
        status: number;
      }
    >;
  };

  executeHold(
    token: string,
    holdId: BytesLike,
    value: BigNumberish,
    lockPreimage: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  retrieveHoldData(
    token: string,
    holdId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      number
    ] & {
      partition: string;
      sender: string;
      recipient: string;
      notary: string;
      value: BigNumber;
      expiration: BigNumber;
      secretHash: string;
      secret: string;
      status: number;
    }
  >;

  callStatic: {
    executeHold(
      token: string,
      holdId: BytesLike,
      value: BigNumberish,
      lockPreimage: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    retrieveHoldData(
      token: string,
      holdId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        number
      ] & {
        partition: string;
        sender: string;
        recipient: string;
        notary: string;
        value: BigNumber;
        expiration: BigNumber;
        secretHash: string;
        secret: string;
        status: number;
      }
    >;
  };

  filters: {};

  estimateGas: {
    executeHold(
      token: string,
      holdId: BytesLike,
      value: BigNumberish,
      lockPreimage: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    retrieveHoldData(
      token: string,
      holdId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    executeHold(
      token: string,
      holdId: BytesLike,
      value: BigNumberish,
      lockPreimage: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    retrieveHoldData(
      token: string,
      holdId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
