/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface BlocklistMockInterface extends utils.Interface {
  functions: {
    "addBlocklistAdmin(address,address)": FunctionFragment;
    "addBlocklisted(address,address)": FunctionFragment;
    "isBlocklistAdmin(address,address)": FunctionFragment;
    "isBlocklisted(address,address)": FunctionFragment;
    "removeBlocklistAdmin(address,address)": FunctionFragment;
    "removeBlocklisted(address,address)": FunctionFragment;
    "renounceBlocklistAdmin(address)": FunctionFragment;
    "mockFunction(address,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addBlocklistAdmin",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addBlocklisted",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isBlocklistAdmin",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isBlocklisted",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBlocklistAdmin",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBlocklisted",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceBlocklistAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mockFunction",
    values: [string, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "addBlocklistAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addBlocklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBlocklistAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBlocklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeBlocklistAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeBlocklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceBlocklistAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockFunction",
    data: BytesLike
  ): Result;

  events: {
    "BlocklistAdminAdded(address,address)": EventFragment;
    "BlocklistAdminRemoved(address,address)": EventFragment;
    "BlocklistedAdded(address,address)": EventFragment;
    "BlocklistedRemoved(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BlocklistAdminAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlocklistAdminRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlocklistedAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlocklistedRemoved"): EventFragment;
}

export type BlocklistAdminAddedEvent = TypedEvent<
  [string, string],
  { token: string; account: string }
>;

export type BlocklistAdminAddedEventFilter =
  TypedEventFilter<BlocklistAdminAddedEvent>;

export type BlocklistAdminRemovedEvent = TypedEvent<
  [string, string],
  { token: string; account: string }
>;

export type BlocklistAdminRemovedEventFilter =
  TypedEventFilter<BlocklistAdminRemovedEvent>;

export type BlocklistedAddedEvent = TypedEvent<
  [string, string],
  { token: string; account: string }
>;

export type BlocklistedAddedEventFilter =
  TypedEventFilter<BlocklistedAddedEvent>;

export type BlocklistedRemovedEvent = TypedEvent<
  [string, string],
  { token: string; account: string }
>;

export type BlocklistedRemovedEventFilter =
  TypedEventFilter<BlocklistedRemovedEvent>;

export interface BlocklistMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BlocklistMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addBlocklistAdmin(
      token: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addBlocklisted(
      token: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isBlocklistAdmin(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isBlocklisted(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeBlocklistAdmin(
      token: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeBlocklisted(
      token: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceBlocklistAdmin(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mockFunction(
      token: string,
      mockActivated: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addBlocklistAdmin(
    token: string,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addBlocklisted(
    token: string,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isBlocklistAdmin(
    token: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isBlocklisted(
    token: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeBlocklistAdmin(
    token: string,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeBlocklisted(
    token: string,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceBlocklistAdmin(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mockFunction(
    token: string,
    mockActivated: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addBlocklistAdmin(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addBlocklisted(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isBlocklistAdmin(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isBlocklisted(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeBlocklistAdmin(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeBlocklisted(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceBlocklistAdmin(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mockFunction(
      token: string,
      mockActivated: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BlocklistAdminAdded(address,address)"(
      token?: string | null,
      account?: string | null
    ): BlocklistAdminAddedEventFilter;
    BlocklistAdminAdded(
      token?: string | null,
      account?: string | null
    ): BlocklistAdminAddedEventFilter;

    "BlocklistAdminRemoved(address,address)"(
      token?: string | null,
      account?: string | null
    ): BlocklistAdminRemovedEventFilter;
    BlocklistAdminRemoved(
      token?: string | null,
      account?: string | null
    ): BlocklistAdminRemovedEventFilter;

    "BlocklistedAdded(address,address)"(
      token?: string | null,
      account?: string | null
    ): BlocklistedAddedEventFilter;
    BlocklistedAdded(
      token?: string | null,
      account?: string | null
    ): BlocklistedAddedEventFilter;

    "BlocklistedRemoved(address,address)"(
      token?: string | null,
      account?: string | null
    ): BlocklistedRemovedEventFilter;
    BlocklistedRemoved(
      token?: string | null,
      account?: string | null
    ): BlocklistedRemovedEventFilter;
  };

  estimateGas: {
    addBlocklistAdmin(
      token: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addBlocklisted(
      token: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isBlocklistAdmin(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBlocklisted(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeBlocklistAdmin(
      token: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeBlocklisted(
      token: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceBlocklistAdmin(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mockFunction(
      token: string,
      mockActivated: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addBlocklistAdmin(
      token: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addBlocklisted(
      token: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isBlocklistAdmin(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBlocklisted(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeBlocklistAdmin(
      token: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeBlocklisted(
      token: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceBlocklistAdmin(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mockFunction(
      token: string,
      mockActivated: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
