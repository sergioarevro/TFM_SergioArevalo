/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface PauserRoleInterface extends utils.Interface {
  functions: {
    "isPauser(address,address)": FunctionFragment;
    "addPauser(address,address)": FunctionFragment;
    "removePauser(address,address)": FunctionFragment;
    "renouncePauser(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "isPauser",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addPauser",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removePauser",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renouncePauser",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "isPauser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addPauser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removePauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renouncePauser",
    data: BytesLike
  ): Result;

  events: {
    "PauserAdded(address,address)": EventFragment;
    "PauserRemoved(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PauserAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauserRemoved"): EventFragment;
}

export type PauserAddedEvent = TypedEvent<
  [string, string],
  { token: string; account: string }
>;

export type PauserAddedEventFilter = TypedEventFilter<PauserAddedEvent>;

export type PauserRemovedEvent = TypedEvent<
  [string, string],
  { token: string; account: string }
>;

export type PauserRemovedEventFilter = TypedEventFilter<PauserRemovedEvent>;

export interface PauserRole extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PauserRoleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isPauser(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    addPauser(
      token: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removePauser(
      token: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renouncePauser(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  isPauser(
    token: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  addPauser(
    token: string,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removePauser(
    token: string,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renouncePauser(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    isPauser(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addPauser(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removePauser(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renouncePauser(token: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "PauserAdded(address,address)"(
      token?: string | null,
      account?: string | null
    ): PauserAddedEventFilter;
    PauserAdded(
      token?: string | null,
      account?: string | null
    ): PauserAddedEventFilter;

    "PauserRemoved(address,address)"(
      token?: string | null,
      account?: string | null
    ): PauserRemovedEventFilter;
    PauserRemoved(
      token?: string | null,
      account?: string | null
    ): PauserRemovedEventFilter;
  };

  estimateGas: {
    isPauser(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addPauser(
      token: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removePauser(
      token: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renouncePauser(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isPauser(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addPauser(
      token: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removePauser(
      token: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renouncePauser(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
