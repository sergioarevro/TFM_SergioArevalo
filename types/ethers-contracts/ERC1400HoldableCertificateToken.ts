/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ERC1400HoldableCertificateTokenInterface
  extends utils.Interface {
  functions: {
    "addMinter(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "allowanceByPartition(bytes32,address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "approveByPartition(bytes32,address,uint256)": FunctionFragment;
    "authorizeOperator(address)": FunctionFragment;
    "authorizeOperatorByPartition(bytes32,address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balanceOfByPartition(bytes32,address)": FunctionFragment;
    "canImplementInterfaceForAddress(bytes32,address)": FunctionFragment;
    "controllers()": FunctionFragment;
    "controllersByPartition(bytes32)": FunctionFragment;
    "decimals()": FunctionFragment;
    "domainName()": FunctionFragment;
    "domainSeparator()": FunctionFragment;
    "domainVersion()": FunctionFragment;
    "generateDomainSeparator()": FunctionFragment;
    "getAllDocuments()": FunctionFragment;
    "getDefaultPartitions()": FunctionFragment;
    "getDocument(bytes32)": FunctionFragment;
    "granularity()": FunctionFragment;
    "isControllable()": FunctionFragment;
    "isIssuable()": FunctionFragment;
    "isMinter(address)": FunctionFragment;
    "isOperator(address,address)": FunctionFragment;
    "isOperatorForPartition(bytes32,address,address)": FunctionFragment;
    "issue(address,uint256,bytes)": FunctionFragment;
    "issueByPartition(bytes32,address,uint256,bytes)": FunctionFragment;
    "migrate(address,bool)": FunctionFragment;
    "name()": FunctionFragment;
    "operatorRedeemByPartition(bytes32,address,uint256,bytes)": FunctionFragment;
    "operatorTransferByPartition(bytes32,address,address,uint256,bytes,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "partitionsOf(address)": FunctionFragment;
    "redeem(uint256,bytes)": FunctionFragment;
    "redeemByPartition(bytes32,uint256,bytes)": FunctionFragment;
    "redeemFrom(address,uint256,bytes)": FunctionFragment;
    "removeDocument(bytes32)": FunctionFragment;
    "removeMinter(address)": FunctionFragment;
    "renounceControl()": FunctionFragment;
    "renounceIssuance()": FunctionFragment;
    "renounceMinter()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revokeOperator(address)": FunctionFragment;
    "revokeOperatorByPartition(bytes32,address)": FunctionFragment;
    "setControllers(address[])": FunctionFragment;
    "setDefaultPartitions(bytes32[])": FunctionFragment;
    "setDocument(bytes32,string,bytes32)": FunctionFragment;
    "setPartitionControllers(bytes32,address[])": FunctionFragment;
    "setTokenExtension(address,string,bool,bool,bool)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalPartitions()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalSupplyByPartition(bytes32)": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferByPartition(bytes32,address,uint256,bytes)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferFromWithData(address,address,uint256,bytes)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferWithData(address,uint256,bytes)": FunctionFragment;
    "canTransferByPartition(bytes32,address,uint256,bytes)": FunctionFragment;
    "canOperatorTransferByPartition(bytes32,address,address,uint256,bytes,bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addMinter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowanceByPartition",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveByPartition",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeOperatorByPartition",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "balanceOfByPartition",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "canImplementInterfaceForAddress",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "controllers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controllersByPartition",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "domainName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "domainVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generateDomainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllDocuments",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultPartitions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDocument",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "granularity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isControllable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isIssuable",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isMinter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperatorForPartition",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "issue",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "issueByPartition",
    values: [BytesLike, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "operatorRedeemByPartition",
    values: [BytesLike, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorTransferByPartition",
    values: [BytesLike, string, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "partitionsOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemByPartition",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemFrom",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDocument",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMinter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceControl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceIssuance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceMinter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeOperatorByPartition",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setControllers",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultPartitions",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setDocument",
    values: [BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPartitionControllers",
    values: [BytesLike, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenExtension",
    values: [string, string, boolean, boolean, boolean]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalPartitions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyByPartition",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferByPartition",
    values: [BytesLike, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromWithData",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferWithData",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canTransferByPartition",
    values: [BytesLike, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canOperatorTransferByPartition",
    values: [BytesLike, string, string, BigNumberish, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "addMinter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowanceByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeOperatorByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canImplementInterfaceForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllersByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "domainName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateDomainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllDocuments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultPartitions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "granularity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isControllable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isIssuable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isMinter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isOperatorForPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "issueByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "operatorRedeemByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorTransferByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "partitionsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeemFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceIssuance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeOperatorByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setControllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultPartitions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPartitionControllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalPartitions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromWithData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferWithData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canTransferByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canOperatorTransferByPartition",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalByPartition(bytes32,address,address,uint256)": EventFragment;
    "AuthorizedOperator(address,address)": EventFragment;
    "AuthorizedOperatorByPartition(bytes32,address,address)": EventFragment;
    "ChangedPartition(bytes32,bytes32,uint256)": EventFragment;
    "DocumentRemoved(bytes32,string,bytes32)": EventFragment;
    "DocumentUpdated(bytes32,string,bytes32)": EventFragment;
    "Issued(address,address,uint256,bytes)": EventFragment;
    "IssuedByPartition(bytes32,address,address,uint256,bytes,bytes)": EventFragment;
    "MinterAdded(address)": EventFragment;
    "MinterRemoved(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Redeemed(address,address,uint256,bytes)": EventFragment;
    "RedeemedByPartition(bytes32,address,address,uint256,bytes)": EventFragment;
    "RevokedOperator(address,address)": EventFragment;
    "RevokedOperatorByPartition(bytes32,address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "TransferByPartition(bytes32,address,address,address,uint256,bytes,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalByPartition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuthorizedOperator"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AuthorizedOperatorByPartition"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedPartition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DocumentRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DocumentUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Issued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IssuedByPartition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinterAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinterRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemedByPartition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokedOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokedOperatorByPartition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferByPartition"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalByPartitionEvent = TypedEvent<
  [string, string, string, BigNumber],
  { partition: string; owner: string; spender: string; value: BigNumber }
>;

export type ApprovalByPartitionEventFilter =
  TypedEventFilter<ApprovalByPartitionEvent>;

export type AuthorizedOperatorEvent = TypedEvent<
  [string, string],
  { operator: string; tokenHolder: string }
>;

export type AuthorizedOperatorEventFilter =
  TypedEventFilter<AuthorizedOperatorEvent>;

export type AuthorizedOperatorByPartitionEvent = TypedEvent<
  [string, string, string],
  { partition: string; operator: string; tokenHolder: string }
>;

export type AuthorizedOperatorByPartitionEventFilter =
  TypedEventFilter<AuthorizedOperatorByPartitionEvent>;

export type ChangedPartitionEvent = TypedEvent<
  [string, string, BigNumber],
  { fromPartition: string; toPartition: string; value: BigNumber }
>;

export type ChangedPartitionEventFilter =
  TypedEventFilter<ChangedPartitionEvent>;

export type DocumentRemovedEvent = TypedEvent<
  [string, string, string],
  { name: string; uri: string; documentHash: string }
>;

export type DocumentRemovedEventFilter = TypedEventFilter<DocumentRemovedEvent>;

export type DocumentUpdatedEvent = TypedEvent<
  [string, string, string],
  { name: string; uri: string; documentHash: string }
>;

export type DocumentUpdatedEventFilter = TypedEventFilter<DocumentUpdatedEvent>;

export type IssuedEvent = TypedEvent<
  [string, string, BigNumber, string],
  { operator: string; to: string; value: BigNumber; data: string }
>;

export type IssuedEventFilter = TypedEventFilter<IssuedEvent>;

export type IssuedByPartitionEvent = TypedEvent<
  [string, string, string, BigNumber, string, string],
  {
    partition: string;
    operator: string;
    to: string;
    value: BigNumber;
    data: string;
    operatorData: string;
  }
>;

export type IssuedByPartitionEventFilter =
  TypedEventFilter<IssuedByPartitionEvent>;

export type MinterAddedEvent = TypedEvent<[string], { account: string }>;

export type MinterAddedEventFilter = TypedEventFilter<MinterAddedEvent>;

export type MinterRemovedEvent = TypedEvent<[string], { account: string }>;

export type MinterRemovedEventFilter = TypedEventFilter<MinterRemovedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RedeemedEvent = TypedEvent<
  [string, string, BigNumber, string],
  { operator: string; from: string; value: BigNumber; data: string }
>;

export type RedeemedEventFilter = TypedEventFilter<RedeemedEvent>;

export type RedeemedByPartitionEvent = TypedEvent<
  [string, string, string, BigNumber, string],
  {
    partition: string;
    operator: string;
    from: string;
    value: BigNumber;
    operatorData: string;
  }
>;

export type RedeemedByPartitionEventFilter =
  TypedEventFilter<RedeemedByPartitionEvent>;

export type RevokedOperatorEvent = TypedEvent<
  [string, string],
  { operator: string; tokenHolder: string }
>;

export type RevokedOperatorEventFilter = TypedEventFilter<RevokedOperatorEvent>;

export type RevokedOperatorByPartitionEvent = TypedEvent<
  [string, string, string],
  { partition: string; operator: string; tokenHolder: string }
>;

export type RevokedOperatorByPartitionEventFilter =
  TypedEventFilter<RevokedOperatorByPartitionEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type TransferByPartitionEvent = TypedEvent<
  [string, string, string, string, BigNumber, string, string],
  {
    fromPartition: string;
    operator: string;
    from: string;
    to: string;
    value: BigNumber;
    data: string;
    operatorData: string;
  }
>;

export type TransferByPartitionEventFilter =
  TypedEventFilter<TransferByPartitionEvent>;

export interface ERC1400HoldableCertificateToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC1400HoldableCertificateTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addMinter(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Check the value of tokens that an owner allowed to a spender.
     * @param owner address The address which owns the funds.
     * @param spender address The address which will spend the funds.
     */
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Check the value of tokens that an owner allowed to a spender.
     * @param owner address The address which owns the funds.
     * @param partition Name of the partition.
     * @param spender address The address which will spend the funds.
     */
    allowanceByPartition(
      partition: BytesLike,
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Approve the passed address to spend the specified amount of tokens on behalf of 'msg.sender'.
     * @param spender The address which will spend the funds.
     * @param value The amount of tokens to be spent.
     */
    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Approve the passed address to spend the specified amount of tokens on behalf of 'msg.sender'.
     * @param partition Name of the partition.
     * @param spender The address which will spend the funds.
     * @param value The amount of tokens to be spent.
     */
    approveByPartition(
      partition: BytesLike,
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Set a third party operator address as an operator of 'msg.sender' to transfer and redeem tokens on its behalf.
     * @param operator Address to set as an operator for 'msg.sender'.
     */
    authorizeOperator(
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Set 'operator' as an operator for 'msg.sender' for a given partition.
     * @param operator Address to set as an operator for 'msg.sender'.
     * @param partition Name of the partition.
     */
    authorizeOperatorByPartition(
      partition: BytesLike,
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Get the balance of the account with address 'tokenHolder'.
     * @param tokenHolder Address for which the balance is returned.
     */
    balanceOf(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Get balance of a tokenholder for a specific partition.
     * @param partition Name of the partition.
     * @param tokenHolder Address for which the balance is returned.
     */
    balanceOfByPartition(
      partition: BytesLike,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Get the list of controllers as defined by the token contract.
     */
    controllers(overrides?: CallOverrides): Promise<[string[]]>;

    /**
     * Get controllers for a given partition.
     * @param partition Name of the partition.
     */
    controllersByPartition(
      partition: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    /**
     * Get the number of decimals of the token.
     */
    decimals(overrides?: CallOverrides): Promise<[number]>;

    domainName(overrides?: CallOverrides): Promise<[string]>;

    domainSeparator(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    domainVersion(overrides?: CallOverrides): Promise<[string]>;

    generateDomainSeparator(overrides?: CallOverrides): Promise<[string]>;

    getAllDocuments(overrides?: CallOverrides): Promise<[string[]]>;

    /**
     * Get default partitions to transfer from. Function used for ERC20 retrocompatibility. For example, a security token may return the bytes32("unrestricted").
     */
    getDefaultPartitions(overrides?: CallOverrides): Promise<[string[]]>;

    /**
     * Access a document associated with the token.
     * @param documentName Short name (represented as a bytes32) associated to the document.
     */
    getDocument(
      documentName: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber]>;

    /**
     * Get the smallest part of the token that’s not divisible.
     */
    granularity(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Know if the token can be controlled by operators. If a token returns 'false' for 'isControllable()'' then it MUST always return 'false' in the future.
     */
    isControllable(overrides?: CallOverrides): Promise<[boolean]>;

    /**
     * Know if new tokens can be issued in the future.
     */
    isIssuable(overrides?: CallOverrides): Promise<[boolean]>;

    isMinter(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    /**
     * Indicate whether the operator address is an operator of the tokenHolder address.
     * @param operator Address which may be an operator of tokenHolder.
     * @param tokenHolder Address of a token holder which may have the operator address as an operator.
     */
    isOperator(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Indicate whether the operator address is an operator of the tokenHolder address for the given partition.
     * @param operator Address which may be an operator of tokenHolder for the given partition.
     * @param partition Name of the partition.
     * @param tokenHolder Address of a token holder which may have the operator address as an operator for the given partition.
     */
    isOperatorForPartition(
      partition: BytesLike,
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Issue tokens from default partition.
     * @param data Information attached to the issuance, by the issuer.
     * @param tokenHolder Address for which we want to issue tokens.
     * @param value Number of tokens issued.
     */
    issue(
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Issue tokens from a specific partition.
     * @param data Information attached to the issuance, by the issuer.
     * @param partition Name of the partition.
     * @param tokenHolder Address for which we want to issue tokens.
     * @param value Number of tokens issued.
     */
    issueByPartition(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Migrate contract. ===> CAUTION: DEFINITIVE ACTION  This function shall be called once a new version of the smart contract has been created. Once this function is called:  - The address of the new smart contract is set in ERC1820 registry  - If the choice is definitive, the current smart contract is turned off and can never be used again
     * @param definitive If set to 'true' the contract is turned off definitely.
     * @param newContractAddress Address of the new version of the smart contract.
     */
    migrate(
      newContractAddress: string,
      definitive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Get the name of the token, e.g., "MyToken".
     */
    name(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Redeem tokens of a specific partition.
     * @param operatorData Information attached to the redemption, by the operator.
     * @param partition Name of the partition.
     * @param tokenHolder Address for which we want to redeem tokens.
     * @param value Number of tokens redeemed
     */
    operatorRedeemByPartition(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Transfer tokens from a specific partition through an operator.
     * @param data Information attached to the transfer. [CAN CONTAIN THE DESTINATION PARTITION]
     * @param from Token holder.
     * @param operatorData Information attached to the transfer, by the operator.
     * @param partition Name of the partition.
     * @param to Token recipient.
     * @param value Number of tokens to transfer.
     */
    operatorTransferByPartition(
      partition: BytesLike,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Get partitions index of a tokenholder.
     * @param tokenHolder Address for which the partitions index are returned.
     */
    partitionsOf(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    /**
     * Redeem the amount of tokens from the address 'msg.sender'.
     * @param data Information attached to the redemption, by the token holder.
     * @param value Number of tokens to redeem.
     */
    redeem(
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Redeem tokens of a specific partition.
     * @param data Information attached to the redemption, by the redeemer.
     * @param partition Name of the partition.
     * @param value Number of tokens redeemed.
     */
    redeemByPartition(
      partition: BytesLike,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Redeem the amount of tokens on behalf of the address from.
     * @param data Information attached to the redemption.
     * @param from Token holder whose tokens will be redeemed (or address(0) to set from to msg.sender).
     * @param value Number of tokens to redeem.
     */
    redeemFrom(
      from: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeDocument(
      documentName: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeMinter(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Definitely renounce the possibility to control tokens on behalf of tokenHolders. Once set to false, '_isControllable' can never be set to 'true' again.
     */
    renounceControl(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Definitely renounce the possibility to issue new tokens. Once set to false, '_isIssuable' can never be set to 'true' again.
     */
    renounceIssuance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceMinter(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Remove the right of the operator address to be an operator for 'msg.sender' and to transfer and redeem tokens on its behalf.
     * @param operator Address to rescind as an operator for 'msg.sender'.
     */
    revokeOperator(
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Remove the right of the operator address to be an operator on a given partition for 'msg.sender' and to transfer and redeem tokens on its behalf.
     * @param operator Address to rescind as an operator on given partition for 'msg.sender'.
     * @param partition Name of the partition.
     */
    revokeOperatorByPartition(
      partition: BytesLike,
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Set list of token controllers.
     * @param operators Controller addresses.
     */
    setControllers(
      operators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Set default partitions to transfer from. Function used for ERC20 retrocompatibility.
     * @param partitions partitions to use by default when not specified.
     */
    setDefaultPartitions(
      partitions: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Associate a document with the token.
     * @param documentHash Hash of the document [optional parameter].
     * @param documentName Short name (represented as a bytes32) associated to the document.
     * @param uri Document content.
     */
    setDocument(
      documentName: BytesLike,
      uri: string,
      documentHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Set list of token partition controllers.
     * @param operators Controller addresses.
     * @param partition Name of the partition.
     */
    setPartitionControllers(
      partition: BytesLike,
      operators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Set token extension contract address. The extension contract can for example verify "ERC1400TokensValidator" or "ERC1400TokensChecker" interfaces. If the extension is an "ERC1400TokensValidator", it will be called everytime a transfer is executed.
     * @param addControllerRoleForExtension If set to 'true', the extension contract will be added as controller.
     * @param addMinterRoleForExtension If set to 'true', the extension contract will be added as minter.
     * @param extension Address of the extension contract.
     * @param interfaceLabel Interface label of extension contract.
     * @param removeOldExtensionRoles If set to 'true', the roles of the old extension(minter, controller) will be removed extension.
     */
    setTokenExtension(
      extension: string,
      interfaceLabel: string,
      removeOldExtensionRoles: boolean,
      addMinterRoleForExtension: boolean,
      addControllerRoleForExtension: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Get the symbol of the token, e.g., "MYT".
     */
    symbol(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Get list of existing partitions.
     */
    totalPartitions(overrides?: CallOverrides): Promise<[string[]]>;

    /**
     * Get the total number of issued tokens.
     */
    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Get the total number of issued tokens for a given partition.
     * @param partition Name of the partition.
     */
    totalSupplyByPartition(
      partition: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Transfer token for a specified address.
     * @param to The address to transfer to.
     * @param value The value to be transferred.
     */
    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Transfer tokens from a specific partition.
     * @param data Information attached to the transfer, by the token holder.
     * @param partition Name of the partition.
     * @param to Token recipient.
     * @param value Number of tokens to transfer.
     */
    transferByPartition(
      partition: BytesLike,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Transfer tokens from one address to another.
     * @param from The address which you want to transfer tokens from.
     * @param to The address which you want to transfer to.
     * @param value The amount of tokens to be transferred.
     */
    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Transfer the amount of tokens on behalf of the address 'from' to the address 'to'.
     * @param data Information attached to the transfer, and intended for the token holder ('from').
     * @param from Token holder (or 'address(0)' to set from to 'msg.sender').
     * @param to Token recipient.
     * @param value Number of tokens to transfer.
     */
    transferFromWithData(
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Transfer the amount of tokens from the address 'msg.sender' to the address 'to'.
     * @param data Information attached to the transfer, by the token holder.
     * @param to Token recipient.
     * @param value Number of tokens to transfer.
     */
    transferWithData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Know the reason on success or failure based on the EIP-1066 application-specific status codes.
     * @param data Information attached to the transfer, by the token holder. [CONTAINS THE CONDITIONAL OWNERSHIP CERTIFICATE]
     * @param partition Name of the partition.
     * @param to Token recipient.
     * @param value Number of tokens to transfer.
     */
    canTransferByPartition(
      partition: BytesLike,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string, string]>;

    /**
     * Know the reason on success or failure based on the EIP-1066 application-specific status codes.
     * @param data Information attached to the transfer. [CAN CONTAIN THE DESTINATION PARTITION]
     * @param from Token holder.
     * @param operatorData Information attached to the transfer, by the operator. [CONTAINS THE CONDITIONAL OWNERSHIP CERTIFICATE]
     * @param partition Name of the partition.
     * @param to Token recipient.
     * @param value Number of tokens to transfer.
     */
    canOperatorTransferByPartition(
      partition: BytesLike,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string, string]>;
  };

  addMinter(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Check the value of tokens that an owner allowed to a spender.
   * @param owner address The address which owns the funds.
   * @param spender address The address which will spend the funds.
   */
  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Check the value of tokens that an owner allowed to a spender.
   * @param owner address The address which owns the funds.
   * @param partition Name of the partition.
   * @param spender address The address which will spend the funds.
   */
  allowanceByPartition(
    partition: BytesLike,
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Approve the passed address to spend the specified amount of tokens on behalf of 'msg.sender'.
   * @param spender The address which will spend the funds.
   * @param value The amount of tokens to be spent.
   */
  approve(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Approve the passed address to spend the specified amount of tokens on behalf of 'msg.sender'.
   * @param partition Name of the partition.
   * @param spender The address which will spend the funds.
   * @param value The amount of tokens to be spent.
   */
  approveByPartition(
    partition: BytesLike,
    spender: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Set a third party operator address as an operator of 'msg.sender' to transfer and redeem tokens on its behalf.
   * @param operator Address to set as an operator for 'msg.sender'.
   */
  authorizeOperator(
    operator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Set 'operator' as an operator for 'msg.sender' for a given partition.
   * @param operator Address to set as an operator for 'msg.sender'.
   * @param partition Name of the partition.
   */
  authorizeOperatorByPartition(
    partition: BytesLike,
    operator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Get the balance of the account with address 'tokenHolder'.
   * @param tokenHolder Address for which the balance is returned.
   */
  balanceOf(tokenHolder: string, overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Get balance of a tokenholder for a specific partition.
   * @param partition Name of the partition.
   * @param tokenHolder Address for which the balance is returned.
   */
  balanceOfByPartition(
    partition: BytesLike,
    tokenHolder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  canImplementInterfaceForAddress(
    interfaceHash: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Get the list of controllers as defined by the token contract.
   */
  controllers(overrides?: CallOverrides): Promise<string[]>;

  /**
   * Get controllers for a given partition.
   * @param partition Name of the partition.
   */
  controllersByPartition(
    partition: BytesLike,
    overrides?: CallOverrides
  ): Promise<string[]>;

  /**
   * Get the number of decimals of the token.
   */
  decimals(overrides?: CallOverrides): Promise<number>;

  domainName(overrides?: CallOverrides): Promise<string>;

  domainSeparator(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  domainVersion(overrides?: CallOverrides): Promise<string>;

  generateDomainSeparator(overrides?: CallOverrides): Promise<string>;

  getAllDocuments(overrides?: CallOverrides): Promise<string[]>;

  /**
   * Get default partitions to transfer from. Function used for ERC20 retrocompatibility. For example, a security token may return the bytes32("unrestricted").
   */
  getDefaultPartitions(overrides?: CallOverrides): Promise<string[]>;

  /**
   * Access a document associated with the token.
   * @param documentName Short name (represented as a bytes32) associated to the document.
   */
  getDocument(
    documentName: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string, BigNumber]>;

  /**
   * Get the smallest part of the token that’s not divisible.
   */
  granularity(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Know if the token can be controlled by operators. If a token returns 'false' for 'isControllable()'' then it MUST always return 'false' in the future.
   */
  isControllable(overrides?: CallOverrides): Promise<boolean>;

  /**
   * Know if new tokens can be issued in the future.
   */
  isIssuable(overrides?: CallOverrides): Promise<boolean>;

  isMinter(account: string, overrides?: CallOverrides): Promise<boolean>;

  /**
   * Indicate whether the operator address is an operator of the tokenHolder address.
   * @param operator Address which may be an operator of tokenHolder.
   * @param tokenHolder Address of a token holder which may have the operator address as an operator.
   */
  isOperator(
    operator: string,
    tokenHolder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Indicate whether the operator address is an operator of the tokenHolder address for the given partition.
   * @param operator Address which may be an operator of tokenHolder for the given partition.
   * @param partition Name of the partition.
   * @param tokenHolder Address of a token holder which may have the operator address as an operator for the given partition.
   */
  isOperatorForPartition(
    partition: BytesLike,
    operator: string,
    tokenHolder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Issue tokens from default partition.
   * @param data Information attached to the issuance, by the issuer.
   * @param tokenHolder Address for which we want to issue tokens.
   * @param value Number of tokens issued.
   */
  issue(
    tokenHolder: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Issue tokens from a specific partition.
   * @param data Information attached to the issuance, by the issuer.
   * @param partition Name of the partition.
   * @param tokenHolder Address for which we want to issue tokens.
   * @param value Number of tokens issued.
   */
  issueByPartition(
    partition: BytesLike,
    tokenHolder: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Migrate contract. ===> CAUTION: DEFINITIVE ACTION  This function shall be called once a new version of the smart contract has been created. Once this function is called:  - The address of the new smart contract is set in ERC1820 registry  - If the choice is definitive, the current smart contract is turned off and can never be used again
   * @param definitive If set to 'true' the contract is turned off definitely.
   * @param newContractAddress Address of the new version of the smart contract.
   */
  migrate(
    newContractAddress: string,
    definitive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Get the name of the token, e.g., "MyToken".
   */
  name(overrides?: CallOverrides): Promise<string>;

  /**
   * Redeem tokens of a specific partition.
   * @param operatorData Information attached to the redemption, by the operator.
   * @param partition Name of the partition.
   * @param tokenHolder Address for which we want to redeem tokens.
   * @param value Number of tokens redeemed
   */
  operatorRedeemByPartition(
    partition: BytesLike,
    tokenHolder: string,
    value: BigNumberish,
    operatorData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Transfer tokens from a specific partition through an operator.
   * @param data Information attached to the transfer. [CAN CONTAIN THE DESTINATION PARTITION]
   * @param from Token holder.
   * @param operatorData Information attached to the transfer, by the operator.
   * @param partition Name of the partition.
   * @param to Token recipient.
   * @param value Number of tokens to transfer.
   */
  operatorTransferByPartition(
    partition: BytesLike,
    from: string,
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Get partitions index of a tokenholder.
   * @param tokenHolder Address for which the partitions index are returned.
   */
  partitionsOf(
    tokenHolder: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  /**
   * Redeem the amount of tokens from the address 'msg.sender'.
   * @param data Information attached to the redemption, by the token holder.
   * @param value Number of tokens to redeem.
   */
  redeem(
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Redeem tokens of a specific partition.
   * @param data Information attached to the redemption, by the redeemer.
   * @param partition Name of the partition.
   * @param value Number of tokens redeemed.
   */
  redeemByPartition(
    partition: BytesLike,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Redeem the amount of tokens on behalf of the address from.
   * @param data Information attached to the redemption.
   * @param from Token holder whose tokens will be redeemed (or address(0) to set from to msg.sender).
   * @param value Number of tokens to redeem.
   */
  redeemFrom(
    from: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeDocument(
    documentName: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeMinter(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Definitely renounce the possibility to control tokens on behalf of tokenHolders. Once set to false, '_isControllable' can never be set to 'true' again.
   */
  renounceControl(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Definitely renounce the possibility to issue new tokens. Once set to false, '_isIssuable' can never be set to 'true' again.
   */
  renounceIssuance(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceMinter(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Remove the right of the operator address to be an operator for 'msg.sender' and to transfer and redeem tokens on its behalf.
   * @param operator Address to rescind as an operator for 'msg.sender'.
   */
  revokeOperator(
    operator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Remove the right of the operator address to be an operator on a given partition for 'msg.sender' and to transfer and redeem tokens on its behalf.
   * @param operator Address to rescind as an operator on given partition for 'msg.sender'.
   * @param partition Name of the partition.
   */
  revokeOperatorByPartition(
    partition: BytesLike,
    operator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Set list of token controllers.
   * @param operators Controller addresses.
   */
  setControllers(
    operators: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Set default partitions to transfer from. Function used for ERC20 retrocompatibility.
   * @param partitions partitions to use by default when not specified.
   */
  setDefaultPartitions(
    partitions: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Associate a document with the token.
   * @param documentHash Hash of the document [optional parameter].
   * @param documentName Short name (represented as a bytes32) associated to the document.
   * @param uri Document content.
   */
  setDocument(
    documentName: BytesLike,
    uri: string,
    documentHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Set list of token partition controllers.
   * @param operators Controller addresses.
   * @param partition Name of the partition.
   */
  setPartitionControllers(
    partition: BytesLike,
    operators: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Set token extension contract address. The extension contract can for example verify "ERC1400TokensValidator" or "ERC1400TokensChecker" interfaces. If the extension is an "ERC1400TokensValidator", it will be called everytime a transfer is executed.
   * @param addControllerRoleForExtension If set to 'true', the extension contract will be added as controller.
   * @param addMinterRoleForExtension If set to 'true', the extension contract will be added as minter.
   * @param extension Address of the extension contract.
   * @param interfaceLabel Interface label of extension contract.
   * @param removeOldExtensionRoles If set to 'true', the roles of the old extension(minter, controller) will be removed extension.
   */
  setTokenExtension(
    extension: string,
    interfaceLabel: string,
    removeOldExtensionRoles: boolean,
    addMinterRoleForExtension: boolean,
    addControllerRoleForExtension: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Get the symbol of the token, e.g., "MYT".
   */
  symbol(overrides?: CallOverrides): Promise<string>;

  /**
   * Get list of existing partitions.
   */
  totalPartitions(overrides?: CallOverrides): Promise<string[]>;

  /**
   * Get the total number of issued tokens.
   */
  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Get the total number of issued tokens for a given partition.
   * @param partition Name of the partition.
   */
  totalSupplyByPartition(
    partition: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Transfer token for a specified address.
   * @param to The address to transfer to.
   * @param value The value to be transferred.
   */
  transfer(
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Transfer tokens from a specific partition.
   * @param data Information attached to the transfer, by the token holder.
   * @param partition Name of the partition.
   * @param to Token recipient.
   * @param value Number of tokens to transfer.
   */
  transferByPartition(
    partition: BytesLike,
    to: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Transfer tokens from one address to another.
   * @param from The address which you want to transfer tokens from.
   * @param to The address which you want to transfer to.
   * @param value The amount of tokens to be transferred.
   */
  transferFrom(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Transfer the amount of tokens on behalf of the address 'from' to the address 'to'.
   * @param data Information attached to the transfer, and intended for the token holder ('from').
   * @param from Token holder (or 'address(0)' to set from to 'msg.sender').
   * @param to Token recipient.
   * @param value Number of tokens to transfer.
   */
  transferFromWithData(
    from: string,
    to: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Transfer the amount of tokens from the address 'msg.sender' to the address 'to'.
   * @param data Information attached to the transfer, by the token holder.
   * @param to Token recipient.
   * @param value Number of tokens to transfer.
   */
  transferWithData(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Know the reason on success or failure based on the EIP-1066 application-specific status codes.
   * @param data Information attached to the transfer, by the token holder. [CONTAINS THE CONDITIONAL OWNERSHIP CERTIFICATE]
   * @param partition Name of the partition.
   * @param to Token recipient.
   * @param value Number of tokens to transfer.
   */
  canTransferByPartition(
    partition: BytesLike,
    to: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string, string]>;

  /**
   * Know the reason on success or failure based on the EIP-1066 application-specific status codes.
   * @param data Information attached to the transfer. [CAN CONTAIN THE DESTINATION PARTITION]
   * @param from Token holder.
   * @param operatorData Information attached to the transfer, by the operator. [CONTAINS THE CONDITIONAL OWNERSHIP CERTIFICATE]
   * @param partition Name of the partition.
   * @param to Token recipient.
   * @param value Number of tokens to transfer.
   */
  canOperatorTransferByPartition(
    partition: BytesLike,
    from: string,
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string, string]>;

  callStatic: {
    addMinter(account: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Check the value of tokens that an owner allowed to a spender.
     * @param owner address The address which owns the funds.
     * @param spender address The address which will spend the funds.
     */
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Check the value of tokens that an owner allowed to a spender.
     * @param owner address The address which owns the funds.
     * @param partition Name of the partition.
     * @param spender address The address which will spend the funds.
     */
    allowanceByPartition(
      partition: BytesLike,
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Approve the passed address to spend the specified amount of tokens on behalf of 'msg.sender'.
     * @param spender The address which will spend the funds.
     * @param value The amount of tokens to be spent.
     */
    approve(
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Approve the passed address to spend the specified amount of tokens on behalf of 'msg.sender'.
     * @param partition Name of the partition.
     * @param spender The address which will spend the funds.
     * @param value The amount of tokens to be spent.
     */
    approveByPartition(
      partition: BytesLike,
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Set a third party operator address as an operator of 'msg.sender' to transfer and redeem tokens on its behalf.
     * @param operator Address to set as an operator for 'msg.sender'.
     */
    authorizeOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Set 'operator' as an operator for 'msg.sender' for a given partition.
     * @param operator Address to set as an operator for 'msg.sender'.
     * @param partition Name of the partition.
     */
    authorizeOperatorByPartition(
      partition: BytesLike,
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Get the balance of the account with address 'tokenHolder'.
     * @param tokenHolder Address for which the balance is returned.
     */
    balanceOf(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get balance of a tokenholder for a specific partition.
     * @param partition Name of the partition.
     * @param tokenHolder Address for which the balance is returned.
     */
    balanceOfByPartition(
      partition: BytesLike,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Get the list of controllers as defined by the token contract.
     */
    controllers(overrides?: CallOverrides): Promise<string[]>;

    /**
     * Get controllers for a given partition.
     * @param partition Name of the partition.
     */
    controllersByPartition(
      partition: BytesLike,
      overrides?: CallOverrides
    ): Promise<string[]>;

    /**
     * Get the number of decimals of the token.
     */
    decimals(overrides?: CallOverrides): Promise<number>;

    domainName(overrides?: CallOverrides): Promise<string>;

    domainSeparator(overrides?: CallOverrides): Promise<string>;

    domainVersion(overrides?: CallOverrides): Promise<string>;

    generateDomainSeparator(overrides?: CallOverrides): Promise<string>;

    getAllDocuments(overrides?: CallOverrides): Promise<string[]>;

    /**
     * Get default partitions to transfer from. Function used for ERC20 retrocompatibility. For example, a security token may return the bytes32("unrestricted").
     */
    getDefaultPartitions(overrides?: CallOverrides): Promise<string[]>;

    /**
     * Access a document associated with the token.
     * @param documentName Short name (represented as a bytes32) associated to the document.
     */
    getDocument(
      documentName: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber]>;

    /**
     * Get the smallest part of the token that’s not divisible.
     */
    granularity(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Know if the token can be controlled by operators. If a token returns 'false' for 'isControllable()'' then it MUST always return 'false' in the future.
     */
    isControllable(overrides?: CallOverrides): Promise<boolean>;

    /**
     * Know if new tokens can be issued in the future.
     */
    isIssuable(overrides?: CallOverrides): Promise<boolean>;

    isMinter(account: string, overrides?: CallOverrides): Promise<boolean>;

    /**
     * Indicate whether the operator address is an operator of the tokenHolder address.
     * @param operator Address which may be an operator of tokenHolder.
     * @param tokenHolder Address of a token holder which may have the operator address as an operator.
     */
    isOperator(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Indicate whether the operator address is an operator of the tokenHolder address for the given partition.
     * @param operator Address which may be an operator of tokenHolder for the given partition.
     * @param partition Name of the partition.
     * @param tokenHolder Address of a token holder which may have the operator address as an operator for the given partition.
     */
    isOperatorForPartition(
      partition: BytesLike,
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Issue tokens from default partition.
     * @param data Information attached to the issuance, by the issuer.
     * @param tokenHolder Address for which we want to issue tokens.
     * @param value Number of tokens issued.
     */
    issue(
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Issue tokens from a specific partition.
     * @param data Information attached to the issuance, by the issuer.
     * @param partition Name of the partition.
     * @param tokenHolder Address for which we want to issue tokens.
     * @param value Number of tokens issued.
     */
    issueByPartition(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Migrate contract. ===> CAUTION: DEFINITIVE ACTION  This function shall be called once a new version of the smart contract has been created. Once this function is called:  - The address of the new smart contract is set in ERC1820 registry  - If the choice is definitive, the current smart contract is turned off and can never be used again
     * @param definitive If set to 'true' the contract is turned off definitely.
     * @param newContractAddress Address of the new version of the smart contract.
     */
    migrate(
      newContractAddress: string,
      definitive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Get the name of the token, e.g., "MyToken".
     */
    name(overrides?: CallOverrides): Promise<string>;

    /**
     * Redeem tokens of a specific partition.
     * @param operatorData Information attached to the redemption, by the operator.
     * @param partition Name of the partition.
     * @param tokenHolder Address for which we want to redeem tokens.
     * @param value Number of tokens redeemed
     */
    operatorRedeemByPartition(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfer tokens from a specific partition through an operator.
     * @param data Information attached to the transfer. [CAN CONTAIN THE DESTINATION PARTITION]
     * @param from Token holder.
     * @param operatorData Information attached to the transfer, by the operator.
     * @param partition Name of the partition.
     * @param to Token recipient.
     * @param value Number of tokens to transfer.
     */
    operatorTransferByPartition(
      partition: BytesLike,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Get partitions index of a tokenholder.
     * @param tokenHolder Address for which the partitions index are returned.
     */
    partitionsOf(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    /**
     * Redeem the amount of tokens from the address 'msg.sender'.
     * @param data Information attached to the redemption, by the token holder.
     * @param value Number of tokens to redeem.
     */
    redeem(
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Redeem tokens of a specific partition.
     * @param data Information attached to the redemption, by the redeemer.
     * @param partition Name of the partition.
     * @param value Number of tokens redeemed.
     */
    redeemByPartition(
      partition: BytesLike,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Redeem the amount of tokens on behalf of the address from.
     * @param data Information attached to the redemption.
     * @param from Token holder whose tokens will be redeemed (or address(0) to set from to msg.sender).
     * @param value Number of tokens to redeem.
     */
    redeemFrom(
      from: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeDocument(
      documentName: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeMinter(account: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Definitely renounce the possibility to control tokens on behalf of tokenHolders. Once set to false, '_isControllable' can never be set to 'true' again.
     */
    renounceControl(overrides?: CallOverrides): Promise<void>;

    /**
     * Definitely renounce the possibility to issue new tokens. Once set to false, '_isIssuable' can never be set to 'true' again.
     */
    renounceIssuance(overrides?: CallOverrides): Promise<void>;

    renounceMinter(overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Remove the right of the operator address to be an operator for 'msg.sender' and to transfer and redeem tokens on its behalf.
     * @param operator Address to rescind as an operator for 'msg.sender'.
     */
    revokeOperator(operator: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Remove the right of the operator address to be an operator on a given partition for 'msg.sender' and to transfer and redeem tokens on its behalf.
     * @param operator Address to rescind as an operator on given partition for 'msg.sender'.
     * @param partition Name of the partition.
     */
    revokeOperatorByPartition(
      partition: BytesLike,
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Set list of token controllers.
     * @param operators Controller addresses.
     */
    setControllers(
      operators: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Set default partitions to transfer from. Function used for ERC20 retrocompatibility.
     * @param partitions partitions to use by default when not specified.
     */
    setDefaultPartitions(
      partitions: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Associate a document with the token.
     * @param documentHash Hash of the document [optional parameter].
     * @param documentName Short name (represented as a bytes32) associated to the document.
     * @param uri Document content.
     */
    setDocument(
      documentName: BytesLike,
      uri: string,
      documentHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Set list of token partition controllers.
     * @param operators Controller addresses.
     * @param partition Name of the partition.
     */
    setPartitionControllers(
      partition: BytesLike,
      operators: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Set token extension contract address. The extension contract can for example verify "ERC1400TokensValidator" or "ERC1400TokensChecker" interfaces. If the extension is an "ERC1400TokensValidator", it will be called everytime a transfer is executed.
     * @param addControllerRoleForExtension If set to 'true', the extension contract will be added as controller.
     * @param addMinterRoleForExtension If set to 'true', the extension contract will be added as minter.
     * @param extension Address of the extension contract.
     * @param interfaceLabel Interface label of extension contract.
     * @param removeOldExtensionRoles If set to 'true', the roles of the old extension(minter, controller) will be removed extension.
     */
    setTokenExtension(
      extension: string,
      interfaceLabel: string,
      removeOldExtensionRoles: boolean,
      addMinterRoleForExtension: boolean,
      addControllerRoleForExtension: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Get the symbol of the token, e.g., "MYT".
     */
    symbol(overrides?: CallOverrides): Promise<string>;

    /**
     * Get list of existing partitions.
     */
    totalPartitions(overrides?: CallOverrides): Promise<string[]>;

    /**
     * Get the total number of issued tokens.
     */
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the total number of issued tokens for a given partition.
     * @param partition Name of the partition.
     */
    totalSupplyByPartition(
      partition: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Transfer token for a specified address.
     * @param to The address to transfer to.
     * @param value The value to be transferred.
     */
    transfer(
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Transfer tokens from a specific partition.
     * @param data Information attached to the transfer, by the token holder.
     * @param partition Name of the partition.
     * @param to Token recipient.
     * @param value Number of tokens to transfer.
     */
    transferByPartition(
      partition: BytesLike,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Transfer tokens from one address to another.
     * @param from The address which you want to transfer tokens from.
     * @param to The address which you want to transfer to.
     * @param value The amount of tokens to be transferred.
     */
    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Transfer the amount of tokens on behalf of the address 'from' to the address 'to'.
     * @param data Information attached to the transfer, and intended for the token holder ('from').
     * @param from Token holder (or 'address(0)' to set from to 'msg.sender').
     * @param to Token recipient.
     * @param value Number of tokens to transfer.
     */
    transferFromWithData(
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfer the amount of tokens from the address 'msg.sender' to the address 'to'.
     * @param data Information attached to the transfer, by the token holder.
     * @param to Token recipient.
     * @param value Number of tokens to transfer.
     */
    transferWithData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Know the reason on success or failure based on the EIP-1066 application-specific status codes.
     * @param data Information attached to the transfer, by the token holder. [CONTAINS THE CONDITIONAL OWNERSHIP CERTIFICATE]
     * @param partition Name of the partition.
     * @param to Token recipient.
     * @param value Number of tokens to transfer.
     */
    canTransferByPartition(
      partition: BytesLike,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string, string]>;

    /**
     * Know the reason on success or failure based on the EIP-1066 application-specific status codes.
     * @param data Information attached to the transfer. [CAN CONTAIN THE DESTINATION PARTITION]
     * @param from Token holder.
     * @param operatorData Information attached to the transfer, by the operator. [CONTAINS THE CONDITIONAL OWNERSHIP CERTIFICATE]
     * @param partition Name of the partition.
     * @param to Token recipient.
     * @param value Number of tokens to transfer.
     */
    canOperatorTransferByPartition(
      partition: BytesLike,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string, string]>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "ApprovalByPartition(bytes32,address,address,uint256)"(
      partition?: BytesLike | null,
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalByPartitionEventFilter;
    ApprovalByPartition(
      partition?: BytesLike | null,
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalByPartitionEventFilter;

    "AuthorizedOperator(address,address)"(
      operator?: string | null,
      tokenHolder?: string | null
    ): AuthorizedOperatorEventFilter;
    AuthorizedOperator(
      operator?: string | null,
      tokenHolder?: string | null
    ): AuthorizedOperatorEventFilter;

    "AuthorizedOperatorByPartition(bytes32,address,address)"(
      partition?: BytesLike | null,
      operator?: string | null,
      tokenHolder?: string | null
    ): AuthorizedOperatorByPartitionEventFilter;
    AuthorizedOperatorByPartition(
      partition?: BytesLike | null,
      operator?: string | null,
      tokenHolder?: string | null
    ): AuthorizedOperatorByPartitionEventFilter;

    "ChangedPartition(bytes32,bytes32,uint256)"(
      fromPartition?: BytesLike | null,
      toPartition?: BytesLike | null,
      value?: null
    ): ChangedPartitionEventFilter;
    ChangedPartition(
      fromPartition?: BytesLike | null,
      toPartition?: BytesLike | null,
      value?: null
    ): ChangedPartitionEventFilter;

    "DocumentRemoved(bytes32,string,bytes32)"(
      name?: BytesLike | null,
      uri?: null,
      documentHash?: null
    ): DocumentRemovedEventFilter;
    DocumentRemoved(
      name?: BytesLike | null,
      uri?: null,
      documentHash?: null
    ): DocumentRemovedEventFilter;

    "DocumentUpdated(bytes32,string,bytes32)"(
      name?: BytesLike | null,
      uri?: null,
      documentHash?: null
    ): DocumentUpdatedEventFilter;
    DocumentUpdated(
      name?: BytesLike | null,
      uri?: null,
      documentHash?: null
    ): DocumentUpdatedEventFilter;

    "Issued(address,address,uint256,bytes)"(
      operator?: string | null,
      to?: string | null,
      value?: null,
      data?: null
    ): IssuedEventFilter;
    Issued(
      operator?: string | null,
      to?: string | null,
      value?: null,
      data?: null
    ): IssuedEventFilter;

    "IssuedByPartition(bytes32,address,address,uint256,bytes,bytes)"(
      partition?: BytesLike | null,
      operator?: string | null,
      to?: string | null,
      value?: null,
      data?: null,
      operatorData?: null
    ): IssuedByPartitionEventFilter;
    IssuedByPartition(
      partition?: BytesLike | null,
      operator?: string | null,
      to?: string | null,
      value?: null,
      data?: null,
      operatorData?: null
    ): IssuedByPartitionEventFilter;

    "MinterAdded(address)"(account?: string | null): MinterAddedEventFilter;
    MinterAdded(account?: string | null): MinterAddedEventFilter;

    "MinterRemoved(address)"(account?: string | null): MinterRemovedEventFilter;
    MinterRemoved(account?: string | null): MinterRemovedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Redeemed(address,address,uint256,bytes)"(
      operator?: string | null,
      from?: string | null,
      value?: null,
      data?: null
    ): RedeemedEventFilter;
    Redeemed(
      operator?: string | null,
      from?: string | null,
      value?: null,
      data?: null
    ): RedeemedEventFilter;

    "RedeemedByPartition(bytes32,address,address,uint256,bytes)"(
      partition?: BytesLike | null,
      operator?: string | null,
      from?: string | null,
      value?: null,
      operatorData?: null
    ): RedeemedByPartitionEventFilter;
    RedeemedByPartition(
      partition?: BytesLike | null,
      operator?: string | null,
      from?: string | null,
      value?: null,
      operatorData?: null
    ): RedeemedByPartitionEventFilter;

    "RevokedOperator(address,address)"(
      operator?: string | null,
      tokenHolder?: string | null
    ): RevokedOperatorEventFilter;
    RevokedOperator(
      operator?: string | null,
      tokenHolder?: string | null
    ): RevokedOperatorEventFilter;

    "RevokedOperatorByPartition(bytes32,address,address)"(
      partition?: BytesLike | null,
      operator?: string | null,
      tokenHolder?: string | null
    ): RevokedOperatorByPartitionEventFilter;
    RevokedOperatorByPartition(
      partition?: BytesLike | null,
      operator?: string | null,
      tokenHolder?: string | null
    ): RevokedOperatorByPartitionEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "TransferByPartition(bytes32,address,address,address,uint256,bytes,bytes)"(
      fromPartition?: BytesLike | null,
      operator?: null,
      from?: string | null,
      to?: string | null,
      value?: null,
      data?: null,
      operatorData?: null
    ): TransferByPartitionEventFilter;
    TransferByPartition(
      fromPartition?: BytesLike | null,
      operator?: null,
      from?: string | null,
      to?: string | null,
      value?: null,
      data?: null,
      operatorData?: null
    ): TransferByPartitionEventFilter;
  };

  estimateGas: {
    addMinter(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Check the value of tokens that an owner allowed to a spender.
     * @param owner address The address which owns the funds.
     * @param spender address The address which will spend the funds.
     */
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Check the value of tokens that an owner allowed to a spender.
     * @param owner address The address which owns the funds.
     * @param partition Name of the partition.
     * @param spender address The address which will spend the funds.
     */
    allowanceByPartition(
      partition: BytesLike,
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Approve the passed address to spend the specified amount of tokens on behalf of 'msg.sender'.
     * @param spender The address which will spend the funds.
     * @param value The amount of tokens to be spent.
     */
    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Approve the passed address to spend the specified amount of tokens on behalf of 'msg.sender'.
     * @param partition Name of the partition.
     * @param spender The address which will spend the funds.
     * @param value The amount of tokens to be spent.
     */
    approveByPartition(
      partition: BytesLike,
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Set a third party operator address as an operator of 'msg.sender' to transfer and redeem tokens on its behalf.
     * @param operator Address to set as an operator for 'msg.sender'.
     */
    authorizeOperator(
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Set 'operator' as an operator for 'msg.sender' for a given partition.
     * @param operator Address to set as an operator for 'msg.sender'.
     * @param partition Name of the partition.
     */
    authorizeOperatorByPartition(
      partition: BytesLike,
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Get the balance of the account with address 'tokenHolder'.
     * @param tokenHolder Address for which the balance is returned.
     */
    balanceOf(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get balance of a tokenholder for a specific partition.
     * @param partition Name of the partition.
     * @param tokenHolder Address for which the balance is returned.
     */
    balanceOfByPartition(
      partition: BytesLike,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get the list of controllers as defined by the token contract.
     */
    controllers(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get controllers for a given partition.
     * @param partition Name of the partition.
     */
    controllersByPartition(
      partition: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get the number of decimals of the token.
     */
    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    domainName(overrides?: CallOverrides): Promise<BigNumber>;

    domainSeparator(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    domainVersion(overrides?: CallOverrides): Promise<BigNumber>;

    generateDomainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    getAllDocuments(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get default partitions to transfer from. Function used for ERC20 retrocompatibility. For example, a security token may return the bytes32("unrestricted").
     */
    getDefaultPartitions(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Access a document associated with the token.
     * @param documentName Short name (represented as a bytes32) associated to the document.
     */
    getDocument(
      documentName: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get the smallest part of the token that’s not divisible.
     */
    granularity(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Know if the token can be controlled by operators. If a token returns 'false' for 'isControllable()'' then it MUST always return 'false' in the future.
     */
    isControllable(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Know if new tokens can be issued in the future.
     */
    isIssuable(overrides?: CallOverrides): Promise<BigNumber>;

    isMinter(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Indicate whether the operator address is an operator of the tokenHolder address.
     * @param operator Address which may be an operator of tokenHolder.
     * @param tokenHolder Address of a token holder which may have the operator address as an operator.
     */
    isOperator(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Indicate whether the operator address is an operator of the tokenHolder address for the given partition.
     * @param operator Address which may be an operator of tokenHolder for the given partition.
     * @param partition Name of the partition.
     * @param tokenHolder Address of a token holder which may have the operator address as an operator for the given partition.
     */
    isOperatorForPartition(
      partition: BytesLike,
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Issue tokens from default partition.
     * @param data Information attached to the issuance, by the issuer.
     * @param tokenHolder Address for which we want to issue tokens.
     * @param value Number of tokens issued.
     */
    issue(
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Issue tokens from a specific partition.
     * @param data Information attached to the issuance, by the issuer.
     * @param partition Name of the partition.
     * @param tokenHolder Address for which we want to issue tokens.
     * @param value Number of tokens issued.
     */
    issueByPartition(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Migrate contract. ===> CAUTION: DEFINITIVE ACTION  This function shall be called once a new version of the smart contract has been created. Once this function is called:  - The address of the new smart contract is set in ERC1820 registry  - If the choice is definitive, the current smart contract is turned off and can never be used again
     * @param definitive If set to 'true' the contract is turned off definitely.
     * @param newContractAddress Address of the new version of the smart contract.
     */
    migrate(
      newContractAddress: string,
      definitive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Get the name of the token, e.g., "MyToken".
     */
    name(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Redeem tokens of a specific partition.
     * @param operatorData Information attached to the redemption, by the operator.
     * @param partition Name of the partition.
     * @param tokenHolder Address for which we want to redeem tokens.
     * @param value Number of tokens redeemed
     */
    operatorRedeemByPartition(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Transfer tokens from a specific partition through an operator.
     * @param data Information attached to the transfer. [CAN CONTAIN THE DESTINATION PARTITION]
     * @param from Token holder.
     * @param operatorData Information attached to the transfer, by the operator.
     * @param partition Name of the partition.
     * @param to Token recipient.
     * @param value Number of tokens to transfer.
     */
    operatorTransferByPartition(
      partition: BytesLike,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get partitions index of a tokenholder.
     * @param tokenHolder Address for which the partitions index are returned.
     */
    partitionsOf(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Redeem the amount of tokens from the address 'msg.sender'.
     * @param data Information attached to the redemption, by the token holder.
     * @param value Number of tokens to redeem.
     */
    redeem(
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Redeem tokens of a specific partition.
     * @param data Information attached to the redemption, by the redeemer.
     * @param partition Name of the partition.
     * @param value Number of tokens redeemed.
     */
    redeemByPartition(
      partition: BytesLike,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Redeem the amount of tokens on behalf of the address from.
     * @param data Information attached to the redemption.
     * @param from Token holder whose tokens will be redeemed (or address(0) to set from to msg.sender).
     * @param value Number of tokens to redeem.
     */
    redeemFrom(
      from: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeDocument(
      documentName: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeMinter(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Definitely renounce the possibility to control tokens on behalf of tokenHolders. Once set to false, '_isControllable' can never be set to 'true' again.
     */
    renounceControl(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Definitely renounce the possibility to issue new tokens. Once set to false, '_isIssuable' can never be set to 'true' again.
     */
    renounceIssuance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceMinter(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Remove the right of the operator address to be an operator for 'msg.sender' and to transfer and redeem tokens on its behalf.
     * @param operator Address to rescind as an operator for 'msg.sender'.
     */
    revokeOperator(
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Remove the right of the operator address to be an operator on a given partition for 'msg.sender' and to transfer and redeem tokens on its behalf.
     * @param operator Address to rescind as an operator on given partition for 'msg.sender'.
     * @param partition Name of the partition.
     */
    revokeOperatorByPartition(
      partition: BytesLike,
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Set list of token controllers.
     * @param operators Controller addresses.
     */
    setControllers(
      operators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Set default partitions to transfer from. Function used for ERC20 retrocompatibility.
     * @param partitions partitions to use by default when not specified.
     */
    setDefaultPartitions(
      partitions: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Associate a document with the token.
     * @param documentHash Hash of the document [optional parameter].
     * @param documentName Short name (represented as a bytes32) associated to the document.
     * @param uri Document content.
     */
    setDocument(
      documentName: BytesLike,
      uri: string,
      documentHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Set list of token partition controllers.
     * @param operators Controller addresses.
     * @param partition Name of the partition.
     */
    setPartitionControllers(
      partition: BytesLike,
      operators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Set token extension contract address. The extension contract can for example verify "ERC1400TokensValidator" or "ERC1400TokensChecker" interfaces. If the extension is an "ERC1400TokensValidator", it will be called everytime a transfer is executed.
     * @param addControllerRoleForExtension If set to 'true', the extension contract will be added as controller.
     * @param addMinterRoleForExtension If set to 'true', the extension contract will be added as minter.
     * @param extension Address of the extension contract.
     * @param interfaceLabel Interface label of extension contract.
     * @param removeOldExtensionRoles If set to 'true', the roles of the old extension(minter, controller) will be removed extension.
     */
    setTokenExtension(
      extension: string,
      interfaceLabel: string,
      removeOldExtensionRoles: boolean,
      addMinterRoleForExtension: boolean,
      addControllerRoleForExtension: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Get the symbol of the token, e.g., "MYT".
     */
    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get list of existing partitions.
     */
    totalPartitions(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the total number of issued tokens.
     */
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the total number of issued tokens for a given partition.
     * @param partition Name of the partition.
     */
    totalSupplyByPartition(
      partition: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Transfer token for a specified address.
     * @param to The address to transfer to.
     * @param value The value to be transferred.
     */
    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Transfer tokens from a specific partition.
     * @param data Information attached to the transfer, by the token holder.
     * @param partition Name of the partition.
     * @param to Token recipient.
     * @param value Number of tokens to transfer.
     */
    transferByPartition(
      partition: BytesLike,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Transfer tokens from one address to another.
     * @param from The address which you want to transfer tokens from.
     * @param to The address which you want to transfer to.
     * @param value The amount of tokens to be transferred.
     */
    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Transfer the amount of tokens on behalf of the address 'from' to the address 'to'.
     * @param data Information attached to the transfer, and intended for the token holder ('from').
     * @param from Token holder (or 'address(0)' to set from to 'msg.sender').
     * @param to Token recipient.
     * @param value Number of tokens to transfer.
     */
    transferFromWithData(
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Transfer the amount of tokens from the address 'msg.sender' to the address 'to'.
     * @param data Information attached to the transfer, by the token holder.
     * @param to Token recipient.
     * @param value Number of tokens to transfer.
     */
    transferWithData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Know the reason on success or failure based on the EIP-1066 application-specific status codes.
     * @param data Information attached to the transfer, by the token holder. [CONTAINS THE CONDITIONAL OWNERSHIP CERTIFICATE]
     * @param partition Name of the partition.
     * @param to Token recipient.
     * @param value Number of tokens to transfer.
     */
    canTransferByPartition(
      partition: BytesLike,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Know the reason on success or failure based on the EIP-1066 application-specific status codes.
     * @param data Information attached to the transfer. [CAN CONTAIN THE DESTINATION PARTITION]
     * @param from Token holder.
     * @param operatorData Information attached to the transfer, by the operator. [CONTAINS THE CONDITIONAL OWNERSHIP CERTIFICATE]
     * @param partition Name of the partition.
     * @param to Token recipient.
     * @param value Number of tokens to transfer.
     */
    canOperatorTransferByPartition(
      partition: BytesLike,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addMinter(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Check the value of tokens that an owner allowed to a spender.
     * @param owner address The address which owns the funds.
     * @param spender address The address which will spend the funds.
     */
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Check the value of tokens that an owner allowed to a spender.
     * @param owner address The address which owns the funds.
     * @param partition Name of the partition.
     * @param spender address The address which will spend the funds.
     */
    allowanceByPartition(
      partition: BytesLike,
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Approve the passed address to spend the specified amount of tokens on behalf of 'msg.sender'.
     * @param spender The address which will spend the funds.
     * @param value The amount of tokens to be spent.
     */
    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Approve the passed address to spend the specified amount of tokens on behalf of 'msg.sender'.
     * @param partition Name of the partition.
     * @param spender The address which will spend the funds.
     * @param value The amount of tokens to be spent.
     */
    approveByPartition(
      partition: BytesLike,
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Set a third party operator address as an operator of 'msg.sender' to transfer and redeem tokens on its behalf.
     * @param operator Address to set as an operator for 'msg.sender'.
     */
    authorizeOperator(
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Set 'operator' as an operator for 'msg.sender' for a given partition.
     * @param operator Address to set as an operator for 'msg.sender'.
     * @param partition Name of the partition.
     */
    authorizeOperatorByPartition(
      partition: BytesLike,
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Get the balance of the account with address 'tokenHolder'.
     * @param tokenHolder Address for which the balance is returned.
     */
    balanceOf(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get balance of a tokenholder for a specific partition.
     * @param partition Name of the partition.
     * @param tokenHolder Address for which the balance is returned.
     */
    balanceOfByPartition(
      partition: BytesLike,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get the list of controllers as defined by the token contract.
     */
    controllers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Get controllers for a given partition.
     * @param partition Name of the partition.
     */
    controllersByPartition(
      partition: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get the number of decimals of the token.
     */
    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    domainName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    domainSeparator(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    domainVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    generateDomainSeparator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllDocuments(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Get default partitions to transfer from. Function used for ERC20 retrocompatibility. For example, a security token may return the bytes32("unrestricted").
     */
    getDefaultPartitions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Access a document associated with the token.
     * @param documentName Short name (represented as a bytes32) associated to the document.
     */
    getDocument(
      documentName: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get the smallest part of the token that’s not divisible.
     */
    granularity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Know if the token can be controlled by operators. If a token returns 'false' for 'isControllable()'' then it MUST always return 'false' in the future.
     */
    isControllable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Know if new tokens can be issued in the future.
     */
    isIssuable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isMinter(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Indicate whether the operator address is an operator of the tokenHolder address.
     * @param operator Address which may be an operator of tokenHolder.
     * @param tokenHolder Address of a token holder which may have the operator address as an operator.
     */
    isOperator(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Indicate whether the operator address is an operator of the tokenHolder address for the given partition.
     * @param operator Address which may be an operator of tokenHolder for the given partition.
     * @param partition Name of the partition.
     * @param tokenHolder Address of a token holder which may have the operator address as an operator for the given partition.
     */
    isOperatorForPartition(
      partition: BytesLike,
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Issue tokens from default partition.
     * @param data Information attached to the issuance, by the issuer.
     * @param tokenHolder Address for which we want to issue tokens.
     * @param value Number of tokens issued.
     */
    issue(
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Issue tokens from a specific partition.
     * @param data Information attached to the issuance, by the issuer.
     * @param partition Name of the partition.
     * @param tokenHolder Address for which we want to issue tokens.
     * @param value Number of tokens issued.
     */
    issueByPartition(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Migrate contract. ===> CAUTION: DEFINITIVE ACTION  This function shall be called once a new version of the smart contract has been created. Once this function is called:  - The address of the new smart contract is set in ERC1820 registry  - If the choice is definitive, the current smart contract is turned off and can never be used again
     * @param definitive If set to 'true' the contract is turned off definitely.
     * @param newContractAddress Address of the new version of the smart contract.
     */
    migrate(
      newContractAddress: string,
      definitive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Get the name of the token, e.g., "MyToken".
     */
    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Redeem tokens of a specific partition.
     * @param operatorData Information attached to the redemption, by the operator.
     * @param partition Name of the partition.
     * @param tokenHolder Address for which we want to redeem tokens.
     * @param value Number of tokens redeemed
     */
    operatorRedeemByPartition(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Transfer tokens from a specific partition through an operator.
     * @param data Information attached to the transfer. [CAN CONTAIN THE DESTINATION PARTITION]
     * @param from Token holder.
     * @param operatorData Information attached to the transfer, by the operator.
     * @param partition Name of the partition.
     * @param to Token recipient.
     * @param value Number of tokens to transfer.
     */
    operatorTransferByPartition(
      partition: BytesLike,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Get partitions index of a tokenholder.
     * @param tokenHolder Address for which the partitions index are returned.
     */
    partitionsOf(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Redeem the amount of tokens from the address 'msg.sender'.
     * @param data Information attached to the redemption, by the token holder.
     * @param value Number of tokens to redeem.
     */
    redeem(
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Redeem tokens of a specific partition.
     * @param data Information attached to the redemption, by the redeemer.
     * @param partition Name of the partition.
     * @param value Number of tokens redeemed.
     */
    redeemByPartition(
      partition: BytesLike,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Redeem the amount of tokens on behalf of the address from.
     * @param data Information attached to the redemption.
     * @param from Token holder whose tokens will be redeemed (or address(0) to set from to msg.sender).
     * @param value Number of tokens to redeem.
     */
    redeemFrom(
      from: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeDocument(
      documentName: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeMinter(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Definitely renounce the possibility to control tokens on behalf of tokenHolders. Once set to false, '_isControllable' can never be set to 'true' again.
     */
    renounceControl(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Definitely renounce the possibility to issue new tokens. Once set to false, '_isIssuable' can never be set to 'true' again.
     */
    renounceIssuance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceMinter(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Remove the right of the operator address to be an operator for 'msg.sender' and to transfer and redeem tokens on its behalf.
     * @param operator Address to rescind as an operator for 'msg.sender'.
     */
    revokeOperator(
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Remove the right of the operator address to be an operator on a given partition for 'msg.sender' and to transfer and redeem tokens on its behalf.
     * @param operator Address to rescind as an operator on given partition for 'msg.sender'.
     * @param partition Name of the partition.
     */
    revokeOperatorByPartition(
      partition: BytesLike,
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Set list of token controllers.
     * @param operators Controller addresses.
     */
    setControllers(
      operators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Set default partitions to transfer from. Function used for ERC20 retrocompatibility.
     * @param partitions partitions to use by default when not specified.
     */
    setDefaultPartitions(
      partitions: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Associate a document with the token.
     * @param documentHash Hash of the document [optional parameter].
     * @param documentName Short name (represented as a bytes32) associated to the document.
     * @param uri Document content.
     */
    setDocument(
      documentName: BytesLike,
      uri: string,
      documentHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Set list of token partition controllers.
     * @param operators Controller addresses.
     * @param partition Name of the partition.
     */
    setPartitionControllers(
      partition: BytesLike,
      operators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Set token extension contract address. The extension contract can for example verify "ERC1400TokensValidator" or "ERC1400TokensChecker" interfaces. If the extension is an "ERC1400TokensValidator", it will be called everytime a transfer is executed.
     * @param addControllerRoleForExtension If set to 'true', the extension contract will be added as controller.
     * @param addMinterRoleForExtension If set to 'true', the extension contract will be added as minter.
     * @param extension Address of the extension contract.
     * @param interfaceLabel Interface label of extension contract.
     * @param removeOldExtensionRoles If set to 'true', the roles of the old extension(minter, controller) will be removed extension.
     */
    setTokenExtension(
      extension: string,
      interfaceLabel: string,
      removeOldExtensionRoles: boolean,
      addMinterRoleForExtension: boolean,
      addControllerRoleForExtension: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Get the symbol of the token, e.g., "MYT".
     */
    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Get list of existing partitions.
     */
    totalPartitions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Get the total number of issued tokens.
     */
    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Get the total number of issued tokens for a given partition.
     * @param partition Name of the partition.
     */
    totalSupplyByPartition(
      partition: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfer token for a specified address.
     * @param to The address to transfer to.
     * @param value The value to be transferred.
     */
    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Transfer tokens from a specific partition.
     * @param data Information attached to the transfer, by the token holder.
     * @param partition Name of the partition.
     * @param to Token recipient.
     * @param value Number of tokens to transfer.
     */
    transferByPartition(
      partition: BytesLike,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Transfer tokens from one address to another.
     * @param from The address which you want to transfer tokens from.
     * @param to The address which you want to transfer to.
     * @param value The amount of tokens to be transferred.
     */
    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Transfer the amount of tokens on behalf of the address 'from' to the address 'to'.
     * @param data Information attached to the transfer, and intended for the token holder ('from').
     * @param from Token holder (or 'address(0)' to set from to 'msg.sender').
     * @param to Token recipient.
     * @param value Number of tokens to transfer.
     */
    transferFromWithData(
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Transfer the amount of tokens from the address 'msg.sender' to the address 'to'.
     * @param data Information attached to the transfer, by the token holder.
     * @param to Token recipient.
     * @param value Number of tokens to transfer.
     */
    transferWithData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Know the reason on success or failure based on the EIP-1066 application-specific status codes.
     * @param data Information attached to the transfer, by the token holder. [CONTAINS THE CONDITIONAL OWNERSHIP CERTIFICATE]
     * @param partition Name of the partition.
     * @param to Token recipient.
     * @param value Number of tokens to transfer.
     */
    canTransferByPartition(
      partition: BytesLike,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Know the reason on success or failure based on the EIP-1066 application-specific status codes.
     * @param data Information attached to the transfer. [CAN CONTAIN THE DESTINATION PARTITION]
     * @param from Token holder.
     * @param operatorData Information attached to the transfer, by the operator. [CONTAINS THE CONDITIONAL OWNERSHIP CERTIFICATE]
     * @param partition Name of the partition.
     * @param to Token recipient.
     * @param value Number of tokens to transfer.
     */
    canOperatorTransferByPartition(
      partition: BytesLike,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
