/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IERC1400Interface extends utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "getAllDocuments()": FunctionFragment;
    "getDocument(bytes32)": FunctionFragment;
    "removeDocument(bytes32)": FunctionFragment;
    "setDocument(bytes32,string,bytes32)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "balanceOfByPartition(bytes32,address)": FunctionFragment;
    "partitionsOf(address)": FunctionFragment;
    "transferWithData(address,uint256,bytes)": FunctionFragment;
    "transferFromWithData(address,address,uint256,bytes)": FunctionFragment;
    "transferByPartition(bytes32,address,uint256,bytes)": FunctionFragment;
    "operatorTransferByPartition(bytes32,address,address,uint256,bytes,bytes)": FunctionFragment;
    "allowanceByPartition(bytes32,address,address)": FunctionFragment;
    "isControllable()": FunctionFragment;
    "authorizeOperator(address)": FunctionFragment;
    "revokeOperator(address)": FunctionFragment;
    "authorizeOperatorByPartition(bytes32,address)": FunctionFragment;
    "revokeOperatorByPartition(bytes32,address)": FunctionFragment;
    "isOperator(address,address)": FunctionFragment;
    "isOperatorForPartition(bytes32,address,address)": FunctionFragment;
    "isIssuable()": FunctionFragment;
    "issue(address,uint256,bytes)": FunctionFragment;
    "issueByPartition(bytes32,address,uint256,bytes)": FunctionFragment;
    "redeem(uint256,bytes)": FunctionFragment;
    "redeemFrom(address,uint256,bytes)": FunctionFragment;
    "redeemByPartition(bytes32,uint256,bytes)": FunctionFragment;
    "operatorRedeemByPartition(bytes32,address,uint256,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getAllDocuments",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDocument",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDocument",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDocument",
    values: [BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfByPartition",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "partitionsOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferWithData",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromWithData",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferByPartition",
    values: [BytesLike, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorTransferByPartition",
    values: [BytesLike, string, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowanceByPartition",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isControllable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeOperatorByPartition",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeOperatorByPartition",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperatorForPartition",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isIssuable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "issue",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "issueByPartition",
    values: [BytesLike, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemFrom",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemByPartition",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorRedeemByPartition",
    values: [BytesLike, string, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllDocuments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "partitionsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferWithData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromWithData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorTransferByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowanceByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isControllable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeOperatorByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeOperatorByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isOperatorForPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isIssuable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "issueByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeemFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorRedeemByPartition",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "AuthorizedOperator(address,address)": EventFragment;
    "AuthorizedOperatorByPartition(bytes32,address,address)": EventFragment;
    "ChangedPartition(bytes32,bytes32,uint256)": EventFragment;
    "DocumentRemoved(bytes32,string,bytes32)": EventFragment;
    "DocumentUpdated(bytes32,string,bytes32)": EventFragment;
    "Issued(address,address,uint256,bytes)": EventFragment;
    "IssuedByPartition(bytes32,address,address,uint256,bytes,bytes)": EventFragment;
    "Redeemed(address,address,uint256,bytes)": EventFragment;
    "RedeemedByPartition(bytes32,address,address,uint256,bytes)": EventFragment;
    "RevokedOperator(address,address)": EventFragment;
    "RevokedOperatorByPartition(bytes32,address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "TransferByPartition(bytes32,address,address,address,uint256,bytes,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuthorizedOperator"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AuthorizedOperatorByPartition"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedPartition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DocumentRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DocumentUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Issued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IssuedByPartition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemedByPartition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokedOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokedOperatorByPartition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferByPartition"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type AuthorizedOperatorEvent = TypedEvent<
  [string, string],
  { operator: string; tokenHolder: string }
>;

export type AuthorizedOperatorEventFilter =
  TypedEventFilter<AuthorizedOperatorEvent>;

export type AuthorizedOperatorByPartitionEvent = TypedEvent<
  [string, string, string],
  { partition: string; operator: string; tokenHolder: string }
>;

export type AuthorizedOperatorByPartitionEventFilter =
  TypedEventFilter<AuthorizedOperatorByPartitionEvent>;

export type ChangedPartitionEvent = TypedEvent<
  [string, string, BigNumber],
  { fromPartition: string; toPartition: string; value: BigNumber }
>;

export type ChangedPartitionEventFilter =
  TypedEventFilter<ChangedPartitionEvent>;

export type DocumentRemovedEvent = TypedEvent<
  [string, string, string],
  { name: string; uri: string; documentHash: string }
>;

export type DocumentRemovedEventFilter = TypedEventFilter<DocumentRemovedEvent>;

export type DocumentUpdatedEvent = TypedEvent<
  [string, string, string],
  { name: string; uri: string; documentHash: string }
>;

export type DocumentUpdatedEventFilter = TypedEventFilter<DocumentUpdatedEvent>;

export type IssuedEvent = TypedEvent<
  [string, string, BigNumber, string],
  { operator: string; to: string; value: BigNumber; data: string }
>;

export type IssuedEventFilter = TypedEventFilter<IssuedEvent>;

export type IssuedByPartitionEvent = TypedEvent<
  [string, string, string, BigNumber, string, string],
  {
    partition: string;
    operator: string;
    to: string;
    value: BigNumber;
    data: string;
    operatorData: string;
  }
>;

export type IssuedByPartitionEventFilter =
  TypedEventFilter<IssuedByPartitionEvent>;

export type RedeemedEvent = TypedEvent<
  [string, string, BigNumber, string],
  { operator: string; from: string; value: BigNumber; data: string }
>;

export type RedeemedEventFilter = TypedEventFilter<RedeemedEvent>;

export type RedeemedByPartitionEvent = TypedEvent<
  [string, string, string, BigNumber, string],
  {
    partition: string;
    operator: string;
    from: string;
    value: BigNumber;
    operatorData: string;
  }
>;

export type RedeemedByPartitionEventFilter =
  TypedEventFilter<RedeemedByPartitionEvent>;

export type RevokedOperatorEvent = TypedEvent<
  [string, string],
  { operator: string; tokenHolder: string }
>;

export type RevokedOperatorEventFilter = TypedEventFilter<RevokedOperatorEvent>;

export type RevokedOperatorByPartitionEvent = TypedEvent<
  [string, string, string],
  { partition: string; operator: string; tokenHolder: string }
>;

export type RevokedOperatorByPartitionEventFilter =
  TypedEventFilter<RevokedOperatorByPartitionEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type TransferByPartitionEvent = TypedEvent<
  [string, string, string, string, BigNumber, string, string],
  {
    fromPartition: string;
    operator: string;
    from: string;
    to: string;
    value: BigNumber;
    data: string;
    operatorData: string;
  }
>;

export type TransferByPartitionEventFilter =
  TypedEventFilter<TransferByPartitionEvent>;

export interface IERC1400 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IERC1400Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
     */
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.
     */
    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns the amount of tokens owned by `account`.
     */
    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getAllDocuments(overrides?: CallOverrides): Promise<[string[]]>;

    getDocument(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber]>;

    removeDocument(
      _name: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDocument(
      _name: BytesLike,
      _uri: string,
      _documentHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns the amount of tokens in existence.
     */
    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.
     */
    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.
     */
    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOfByPartition(
      partition: BytesLike,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    partitionsOf(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    transferWithData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFromWithData(
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferByPartition(
      partition: BytesLike,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    operatorTransferByPartition(
      partition: BytesLike,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowanceByPartition(
      partition: BytesLike,
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isControllable(overrides?: CallOverrides): Promise<[boolean]>;

    authorizeOperator(
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeOperator(
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    authorizeOperatorByPartition(
      partition: BytesLike,
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeOperatorByPartition(
      partition: BytesLike,
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isOperator(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOperatorForPartition(
      partition: BytesLike,
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isIssuable(overrides?: CallOverrides): Promise<[boolean]>;

    issue(
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    issueByPartition(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeem(
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemFrom(
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemByPartition(
      partition: BytesLike,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    operatorRedeemByPartition(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  /**
   * Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
   */
  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.
   */
  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns the amount of tokens owned by `account`.
   */
  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  getAllDocuments(overrides?: CallOverrides): Promise<string[]>;

  getDocument(
    _name: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string, BigNumber]>;

  removeDocument(
    _name: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDocument(
    _name: BytesLike,
    _uri: string,
    _documentHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns the amount of tokens in existence.
   */
  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.
   */
  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.
   */
  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOfByPartition(
    partition: BytesLike,
    tokenHolder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  partitionsOf(
    tokenHolder: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  transferWithData(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFromWithData(
    from: string,
    to: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferByPartition(
    partition: BytesLike,
    to: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  operatorTransferByPartition(
    partition: BytesLike,
    from: string,
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowanceByPartition(
    partition: BytesLike,
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isControllable(overrides?: CallOverrides): Promise<boolean>;

  authorizeOperator(
    operator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeOperator(
    operator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  authorizeOperatorByPartition(
    partition: BytesLike,
    operator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeOperatorByPartition(
    partition: BytesLike,
    operator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isOperator(
    operator: string,
    tokenHolder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOperatorForPartition(
    partition: BytesLike,
    operator: string,
    tokenHolder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isIssuable(overrides?: CallOverrides): Promise<boolean>;

  issue(
    tokenHolder: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  issueByPartition(
    partition: BytesLike,
    tokenHolder: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeem(
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemFrom(
    tokenHolder: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemByPartition(
    partition: BytesLike,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  operatorRedeemByPartition(
    partition: BytesLike,
    tokenHolder: string,
    value: BigNumberish,
    operatorData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
     */
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.
     */
    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Returns the amount of tokens owned by `account`.
     */
    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAllDocuments(overrides?: CallOverrides): Promise<string[]>;

    getDocument(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber]>;

    removeDocument(_name: BytesLike, overrides?: CallOverrides): Promise<void>;

    setDocument(
      _name: BytesLike,
      _uri: string,
      _documentHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns the amount of tokens in existence.
     */
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.
     */
    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.
     */
    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOfByPartition(
      partition: BytesLike,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    partitionsOf(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    transferWithData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFromWithData(
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferByPartition(
      partition: BytesLike,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    operatorTransferByPartition(
      partition: BytesLike,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    allowanceByPartition(
      partition: BytesLike,
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isControllable(overrides?: CallOverrides): Promise<boolean>;

    authorizeOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeOperator(operator: string, overrides?: CallOverrides): Promise<void>;

    authorizeOperatorByPartition(
      partition: BytesLike,
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeOperatorByPartition(
      partition: BytesLike,
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isOperator(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOperatorForPartition(
      partition: BytesLike,
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isIssuable(overrides?: CallOverrides): Promise<boolean>;

    issue(
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    issueByPartition(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    redeem(
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemFrom(
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemByPartition(
      partition: BytesLike,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    operatorRedeemByPartition(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "AuthorizedOperator(address,address)"(
      operator?: string | null,
      tokenHolder?: string | null
    ): AuthorizedOperatorEventFilter;
    AuthorizedOperator(
      operator?: string | null,
      tokenHolder?: string | null
    ): AuthorizedOperatorEventFilter;

    "AuthorizedOperatorByPartition(bytes32,address,address)"(
      partition?: BytesLike | null,
      operator?: string | null,
      tokenHolder?: string | null
    ): AuthorizedOperatorByPartitionEventFilter;
    AuthorizedOperatorByPartition(
      partition?: BytesLike | null,
      operator?: string | null,
      tokenHolder?: string | null
    ): AuthorizedOperatorByPartitionEventFilter;

    "ChangedPartition(bytes32,bytes32,uint256)"(
      fromPartition?: BytesLike | null,
      toPartition?: BytesLike | null,
      value?: null
    ): ChangedPartitionEventFilter;
    ChangedPartition(
      fromPartition?: BytesLike | null,
      toPartition?: BytesLike | null,
      value?: null
    ): ChangedPartitionEventFilter;

    "DocumentRemoved(bytes32,string,bytes32)"(
      name?: BytesLike | null,
      uri?: null,
      documentHash?: null
    ): DocumentRemovedEventFilter;
    DocumentRemoved(
      name?: BytesLike | null,
      uri?: null,
      documentHash?: null
    ): DocumentRemovedEventFilter;

    "DocumentUpdated(bytes32,string,bytes32)"(
      name?: BytesLike | null,
      uri?: null,
      documentHash?: null
    ): DocumentUpdatedEventFilter;
    DocumentUpdated(
      name?: BytesLike | null,
      uri?: null,
      documentHash?: null
    ): DocumentUpdatedEventFilter;

    "Issued(address,address,uint256,bytes)"(
      operator?: string | null,
      to?: string | null,
      value?: null,
      data?: null
    ): IssuedEventFilter;
    Issued(
      operator?: string | null,
      to?: string | null,
      value?: null,
      data?: null
    ): IssuedEventFilter;

    "IssuedByPartition(bytes32,address,address,uint256,bytes,bytes)"(
      partition?: BytesLike | null,
      operator?: string | null,
      to?: string | null,
      value?: null,
      data?: null,
      operatorData?: null
    ): IssuedByPartitionEventFilter;
    IssuedByPartition(
      partition?: BytesLike | null,
      operator?: string | null,
      to?: string | null,
      value?: null,
      data?: null,
      operatorData?: null
    ): IssuedByPartitionEventFilter;

    "Redeemed(address,address,uint256,bytes)"(
      operator?: string | null,
      from?: string | null,
      value?: null,
      data?: null
    ): RedeemedEventFilter;
    Redeemed(
      operator?: string | null,
      from?: string | null,
      value?: null,
      data?: null
    ): RedeemedEventFilter;

    "RedeemedByPartition(bytes32,address,address,uint256,bytes)"(
      partition?: BytesLike | null,
      operator?: string | null,
      from?: string | null,
      value?: null,
      operatorData?: null
    ): RedeemedByPartitionEventFilter;
    RedeemedByPartition(
      partition?: BytesLike | null,
      operator?: string | null,
      from?: string | null,
      value?: null,
      operatorData?: null
    ): RedeemedByPartitionEventFilter;

    "RevokedOperator(address,address)"(
      operator?: string | null,
      tokenHolder?: string | null
    ): RevokedOperatorEventFilter;
    RevokedOperator(
      operator?: string | null,
      tokenHolder?: string | null
    ): RevokedOperatorEventFilter;

    "RevokedOperatorByPartition(bytes32,address,address)"(
      partition?: BytesLike | null,
      operator?: string | null,
      tokenHolder?: string | null
    ): RevokedOperatorByPartitionEventFilter;
    RevokedOperatorByPartition(
      partition?: BytesLike | null,
      operator?: string | null,
      tokenHolder?: string | null
    ): RevokedOperatorByPartitionEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "TransferByPartition(bytes32,address,address,address,uint256,bytes,bytes)"(
      fromPartition?: BytesLike | null,
      operator?: null,
      from?: string | null,
      to?: string | null,
      value?: null,
      data?: null,
      operatorData?: null
    ): TransferByPartitionEventFilter;
    TransferByPartition(
      fromPartition?: BytesLike | null,
      operator?: null,
      from?: string | null,
      to?: string | null,
      value?: null,
      data?: null,
      operatorData?: null
    ): TransferByPartitionEventFilter;
  };

  estimateGas: {
    /**
     * Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
     */
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.
     */
    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Returns the amount of tokens owned by `account`.
     */
    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAllDocuments(overrides?: CallOverrides): Promise<BigNumber>;

    getDocument(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeDocument(
      _name: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDocument(
      _name: BytesLike,
      _uri: string,
      _documentHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Returns the amount of tokens in existence.
     */
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.
     */
    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.
     */
    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOfByPartition(
      partition: BytesLike,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    partitionsOf(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferWithData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFromWithData(
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferByPartition(
      partition: BytesLike,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    operatorTransferByPartition(
      partition: BytesLike,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowanceByPartition(
      partition: BytesLike,
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isControllable(overrides?: CallOverrides): Promise<BigNumber>;

    authorizeOperator(
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeOperator(
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    authorizeOperatorByPartition(
      partition: BytesLike,
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeOperatorByPartition(
      partition: BytesLike,
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isOperator(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOperatorForPartition(
      partition: BytesLike,
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isIssuable(overrides?: CallOverrides): Promise<BigNumber>;

    issue(
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    issueByPartition(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeem(
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemFrom(
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemByPartition(
      partition: BytesLike,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    operatorRedeemByPartition(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
     */
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.
     */
    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the amount of tokens owned by `account`.
     */
    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllDocuments(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDocument(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeDocument(
      _name: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDocument(
      _name: BytesLike,
      _uri: string,
      _documentHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the amount of tokens in existence.
     */
    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.
     */
    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.
     */
    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOfByPartition(
      partition: BytesLike,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    partitionsOf(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferWithData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFromWithData(
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferByPartition(
      partition: BytesLike,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    operatorTransferByPartition(
      partition: BytesLike,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowanceByPartition(
      partition: BytesLike,
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isControllable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    authorizeOperator(
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeOperator(
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    authorizeOperatorByPartition(
      partition: BytesLike,
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeOperatorByPartition(
      partition: BytesLike,
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isOperator(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOperatorForPartition(
      partition: BytesLike,
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isIssuable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    issue(
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    issueByPartition(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeem(
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemFrom(
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemByPartition(
      partition: BytesLike,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    operatorRedeemByPartition(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
