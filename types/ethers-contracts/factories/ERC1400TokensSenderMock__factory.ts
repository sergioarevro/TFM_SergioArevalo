/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC1400TokensSenderMock,
  ERC1400TokensSenderMockInterface,
} from "../ERC1400TokensSenderMock";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "interfaceHash",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "canImplementInterfaceForAddress",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "canTransfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "tokensToTransfer",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506100596040518060400160405280601381526020017f45524331343030546f6b656e7353656e6465720000000000000000000000000081525061005e60201b6101dd1760201c565b6100e6565b60016000808360405160200161007491906100ab565b60408051808303601f19018152918152815160209283012083529082019290925201600020805460ff191691151591909117905550565b6000825160005b818110156100cc57602081860181015185830152016100b2565b818111156100db576000828501525b509190910192915050565b61043d806100f56000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063249cb3fa146100465780634e755a541461006c578063e8a24c6a14610081575b600080fd5b6100596100543660046102be565b6100a4565b6040519081526020015b60405180910390f35b61007f61007a3660046102ea565b610105565b005b61009461008f3660046102ea565b610189565b6040519015158152602001610063565b60008281526020819052604081205460ff16156100fb5760405173455243313832305f4143434550545f4d4147494360601b60208201526034016040516020818303038152906040528051906020012090506100ff565b5060005b92915050565b61014787878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061022a92505050565b61017c5760405162461bcd60e51b81526020600482015260026024820152611a9b60f11b604482015260640160405180910390fd5b5050505050505050505050565b60006101cd88888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061022a92505050565b9c9b505050505050505050505050565b6001600080836040516020016101f391906103cc565b60408051808303601f19018152918152815160209283012083529082019290925201600020805460ff191691151591909117905550565b6020810151600090601160f81b908082141561024b57600092505050610252565b6001925050505b949350505050565b80356001600160a01b038116811461027157600080fd5b919050565b60008083601f84011261028857600080fd5b5081356001600160401b0381111561029f57600080fd5b6020830191508360208285010111156102b757600080fd5b9250929050565b600080604083850312156102d157600080fd5b823591506102e16020840161025a565b90509250929050565b60008060008060008060008060008060006101008c8e03121561030c57600080fd5b6001600160401b038c3581101561032257600080fd5b61032f8e8e358f01610276565b909c509a5060208d0135995061034760408e0161025a565b985061035560608e0161025a565b975061036360808e0161025a565b965060a08d013595508060c08e0135111561037d57600080fd5b61038d8e60c08f01358f01610276565b909550935060e08d01358110156103a357600080fd5b506103b48d60e08e01358e01610276565b81935080925050509295989b509295989b9093969950565b6000825160005b818110156103ed57602081860181015185830152016103d3565b818111156103fc576000828501525b50919091019291505056fea26469706673582212206948a5eac86afe817347be17bd51e87af3b6e325c06f1d8ae5ca6ddef3890d3564736f6c63430008070033";

type ERC1400TokensSenderMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC1400TokensSenderMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC1400TokensSenderMock__factory extends ContractFactory {
  constructor(...args: ERC1400TokensSenderMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC1400TokensSenderMock> {
    return super.deploy(overrides || {}) as Promise<ERC1400TokensSenderMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ERC1400TokensSenderMock {
    return super.attach(address) as ERC1400TokensSenderMock;
  }
  connect(signer: Signer): ERC1400TokensSenderMock__factory {
    return super.connect(signer) as ERC1400TokensSenderMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC1400TokensSenderMockInterface {
    return new utils.Interface(_abi) as ERC1400TokensSenderMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC1400TokensSenderMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ERC1400TokensSenderMock;
  }
}
