/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC1400TokensChecker,
  ERC1400TokensCheckerInterface,
} from "../ERC1400TokensChecker";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "interfaceHash",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "canImplementInterfaceForAddress",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "partition",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "operatorData",
        type: "bytes",
      },
    ],
    name: "canTransferByPartition",
    outputs: [
      {
        internalType: "bytes1",
        name: "",
        type: "bytes1",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506100596040518060400160405280601481526020017f45524331343030546f6b656e73436865636b657200000000000000000000000081525061005e60201b6101e51760201c565b6100e6565b60016000808360405160200161007491906100ab565b60408051808303601f19018152918152815160209283012083529082019290925201600020805460ff191691151591909117905550565b6000825160005b818110156100cc57602081860181015185830152016100b2565b818111156100db576000828501525b509190910192915050565b610cec806100f56000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063249cb3fa1461003b578063c71ff52714610061575b600080fd5b61004e610049366004610964565b61009a565b6040519081526020015b60405180910390f35b61007461006f366004610994565b6100fb565b604080516001600160f81b03199094168452602084019290925290820152606001610058565b60008281526020819052604081205460ff16156100f15760405173455243313832305f4143434550545f4d4147494360601b60208201526034016040516020818303038152906040528051906020012090506100f5565b5060005b92915050565b60008060006101ce8e8e8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508d8d8d8d8d8d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508c8c8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061023292505050565b9250925092509b509b509b98505050505050505050565b6001600080836040516020016101fb9190610ac8565b60408051808303601f19018152918152815160209283012083529082019290925201600020805460ff191691151591909117905550565b6040516336bbe56b60e11b8152600481018890526001600160a01b03808816602483015286166044820152600090819081903390636d77cad69060640160206040518083038186803b15801561028757600080fd5b505afa15801561029b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102bf9190610942565b6102d55750600b60fb1b915060009050886107da565b6040516370a0823160e01b81526001600160a01b0389166004820152869033906370a082319060240160206040518083038186803b15801561031657600080fd5b505afa15801561032a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034e9190610a76565b10806103d757506040516330e8280360e01b8152600481018b90526001600160a01b0389166024820152869033906330e828039060440160206040518083038186803b15801561039d57600080fd5b505afa1580156103b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d59190610a76565b105b156103ee5750602960f91b915060009050886107da565b6001600160a01b03871661040e5750605760f81b915060009050886107da565b6000610445896040518060400160405280601381526020017222a921989a18182a37b5b2b739a9b2b73232b960691b8152506107e8565b90506001600160a01b038116158015906104e65750604051637451263560e11b81526001600160a01b0382169063e8a24c6a90610494908f908f908f908f908f908f908f908f90600401610ae4565b60206040518083038186803b1580156104ac57600080fd5b505afa1580156104c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e49190610942565b155b156104ff5750602b60f91b9250600091508990506107da565b6105378860405180604001604052806016815260200175115490cc4d0c0c151bdad95b9cd49958da5c1a595b9d60521b8152506107e8565b90506001600160a01b038116158015906105d8575060405163f55886df60e01b81526001600160a01b0382169063f55886df90610586908f908f908f908f908f908f908f908f90600401610ae4565b60206040518083038186803b15801561059e57600080fd5b505afa1580156105b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d69190610942565b155b156105f15750605760f81b9250600091508990506107da565b610629336040518060400160405280601681526020017522a921989a18182a37b5b2b739ab30b634b230ba37b960511b8152506107e8565b6040805161012081018252338152602081018f90529081018d90526001600160a01b038c811660608301528b811660808301528a811660a083015260c082018a905260e0820189905261010082018890529192509082161580159061070757506040516398a53ef560e01b81526001600160a01b038316906398a53ef5906106b5908490600401610b5c565b60206040518083038186803b1580156106cd57600080fd5b505afa1580156106e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107059190610942565b155b156107225750601560fa1b9350600092508a91506107da9050565b6000336001600160a01b031663556f0dc76040518163ffffffff1660e01b815260040160206040518083038186803b15801561075d57600080fd5b505afa158015610771573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107959190610a76565b9050886107ac826107a683826108ae565b906108c1565b146107c85750600560fc1b9450600093508b92506107da915050565b50605160f81b9450600093508b925050505b985098509895505050505050565b600080826040516020016107fc9190610ac8565b60408051808303601f1901815290829052805160209091012063555ddc6560e11b82526001600160a01b0386166004830152602482018190529150731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca9060440160206040518083038186803b15801561086e57600080fd5b505afa158015610882573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a69190610925565b949350505050565b60006108ba8284610c1f565b9392505050565b60006108ba8284610c41565b80356108d881610c9e565b919050565b60008083601f8401126108ef57600080fd5b5081356001600160401b0381111561090657600080fd5b60208301915083602082850101111561091e57600080fd5b9250929050565b60006020828403121561093757600080fd5b81516108ba81610c9e565b60006020828403121561095457600080fd5b815180151581146108ba57600080fd5b6000806040838503121561097757600080fd5b82359150602083013561098981610c9e565b809150509250929050565b60008060008060008060008060008060006101008c8e0312156109b657600080fd5b6001600160401b038c358110156109cc57600080fd5b6109d98e8e358f016108dd565b909c509a5060208d013599506109f160408e016108cd565b98506109ff60608e016108cd565b9750610a0d60808e016108cd565b965060a08d013595508060c08e01351115610a2757600080fd5b610a378e60c08f01358f016108dd565b909550935060e08d0135811015610a4d57600080fd5b50610a5e8d60e08e01358e016108dd565b81935080925050509295989b509295989b9093969950565b600060208284031215610a8857600080fd5b5051919050565b6001600160a01b03169052565b60008151808452610ab4816020860160208601610c6e565b601f01601f19169290920160200192915050565b60008251610ada818460208701610c6e565b9190910192915050565b6000610100808352610af88184018c610a9c565b602084018b90526001600160a01b038a8116604086015289811660608601528816608085015260a0840187905283810360c08501529050610b398186610a9c565b905082810360e0840152610b4d8185610a9c565b9b9a5050505050505050505050565b60208152610b6e602082018351610a8f565b60006020830151610120806040850152610b8c610140850183610a9c565b9150604085015160608501526060850151610baa6080860182610a8f565b506080850151610bbd60a0860182610a8f565b5060a0850151610bd060c0860182610a8f565b5060c085015160e085015260e0850151601f19610100818786030181880152610bf98584610a9c565b908801518782039092018488015293509050610c158382610a9c565b9695505050505050565b600082610c3c57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610c6957634e487b7160e01b600052601160045260246000fd5b500290565b60005b83811015610c89578181015183820152602001610c71565b83811115610c98576000848401525b50505050565b6001600160a01b0381168114610cb357600080fd5b5056fea2646970667358221220ced54cdd332c370c8fd4a2c139ca3b943825a64de69933c8c2960ec5de1a9e2364736f6c63430008070033";

type ERC1400TokensCheckerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC1400TokensCheckerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC1400TokensChecker__factory extends ContractFactory {
  constructor(...args: ERC1400TokensCheckerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC1400TokensChecker> {
    return super.deploy(overrides || {}) as Promise<ERC1400TokensChecker>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ERC1400TokensChecker {
    return super.attach(address) as ERC1400TokensChecker;
  }
  connect(signer: Signer): ERC1400TokensChecker__factory {
    return super.connect(signer) as ERC1400TokensChecker__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC1400TokensCheckerInterface {
    return new utils.Interface(_abi) as ERC1400TokensCheckerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC1400TokensChecker {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ERC1400TokensChecker;
  }
}
