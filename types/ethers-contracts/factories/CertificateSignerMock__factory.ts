/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CertificateSignerMock,
  CertificateSignerMockInterface,
} from "../CertificateSignerMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "CertificateSignerAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "CertificateSignerRemoved",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "addCertificateSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "isCertificateSigner",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "removeCertificateSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "renounceCertificateSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161060e38038061060e83398101604081905261002f916101b3565b610039813361003f565b506101e3565b6001600160a01b03821660009081526020818152604090912061006b91839061012a6100af821b17901c565b806001600160a01b0316826001600160a01b03167f9a01aee9f656aba8760d771cf21d803168ecc664c252c9374f4a3252481fbf3560405160405180910390a35050565b6100b98282610130565b1561010b5760405162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c650060448201526064015b60405180910390fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b60006001600160a01b0382166101935760405162461bcd60e51b815260206004820152602260248201527f526f6c65733a206163636f756e7420697320746865207a65726f206164647265604482015261737360f01b6064820152608401610102565b506001600160a01b03166000908152602091909152604090205460ff1690565b6000602082840312156101c557600080fd5b81516001600160a01b03811681146101dc57600080fd5b9392505050565b61041c806101f26000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80633bddaf8f146100515780639e59ceba14610066578063c69664bb1461008d578063e81ea541146100a0575b600080fd5b61006461005f366004610398565b6100b3565b005b6100796100743660046103b3565b6100c0565b604051901515815260200160405180910390f35b61006461009b3660046103b3565b6100e9565b6100646100ae3660046103b3565b61010c565b6100bd81336101ab565b50565b6001600160a01b03821660009081526020819052604081206100e29083610211565b9392505050565b816100f481336100c0565b6100fd57600080fd5b6101078383610294565b505050565b8161011781336100c0565b61012057600080fd5b61010783836101ab565b6101348282610211565b156101865760405162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c650060448201526064015b60405180910390fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b6001600160a01b03821660009081526020819052604090206101cd90826102fa565b806001600160a01b0316826001600160a01b03167f795a3a12ab7aa35ee8d4681ead2986eae8de69f5491d9dccfeca0442f644db8160405160405180910390a35050565b60006001600160a01b0382166102745760405162461bcd60e51b815260206004820152602260248201527f526f6c65733a206163636f756e7420697320746865207a65726f206164647265604482015261737360f01b606482015260840161017d565b506001600160a01b03166000908152602091909152604090205460ff1690565b6001600160a01b03821660009081526020819052604090206102b6908261012a565b806001600160a01b0316826001600160a01b03167f9a01aee9f656aba8760d771cf21d803168ecc664c252c9374f4a3252481fbf3560405160405180910390a35050565b6103048282610211565b61035a5760405162461bcd60e51b815260206004820152602160248201527f526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c6044820152606560f81b606482015260840161017d565b6001600160a01b0316600090815260209190915260409020805460ff19169055565b80356001600160a01b038116811461039357600080fd5b919050565b6000602082840312156103aa57600080fd5b6100e28261037c565b600080604083850312156103c657600080fd5b6103cf8361037c565b91506103dd6020840161037c565b9050925092905056fea2646970667358221220ea87e66277eb9b2028079cc94ed1ee66a791f47026682278ffc46e4e6fb2968264736f6c63430008070033";

type CertificateSignerMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CertificateSignerMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CertificateSignerMock__factory extends ContractFactory {
  constructor(...args: CertificateSignerMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CertificateSignerMock> {
    return super.deploy(
      token,
      overrides || {}
    ) as Promise<CertificateSignerMock>;
  }
  getDeployTransaction(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(token, overrides || {});
  }
  attach(address: string): CertificateSignerMock {
    return super.attach(address) as CertificateSignerMock;
  }
  connect(signer: Signer): CertificateSignerMock__factory {
    return super.connect(signer) as CertificateSignerMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CertificateSignerMockInterface {
    return new utils.Interface(_abi) as CertificateSignerMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CertificateSignerMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as CertificateSignerMock;
  }
}
