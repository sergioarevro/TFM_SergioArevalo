/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface BatchReaderInterface extends utils.Interface {
  functions: {
    "canImplementInterfaceForAddress(bytes32,address)": FunctionFragment;
    "batchTokenSuppliesInfos(address[])": FunctionFragment;
    "batchTokenRolesInfos(address[])": FunctionFragment;
    "batchControllers(address[])": FunctionFragment;
    "batchExtensionControllers(address[])": FunctionFragment;
    "batchTokenExtensionSetup(address[])": FunctionFragment;
    "batchTokenExtensionSetup1(address[])": FunctionFragment;
    "batchTokenExtensionSetup2(address[])": FunctionFragment;
    "batchERC1400Balances(address[],address[])": FunctionFragment;
    "batchERC20Balances(address[],address[])": FunctionFragment;
    "batchEthBalance(address[])": FunctionFragment;
    "batchERC721Balances(address[],address[])": FunctionFragment;
    "batchBalanceOf(address[],address[])": FunctionFragment;
    "batchBalanceOfByPartition(address[],address[])": FunctionFragment;
    "batchSpendableBalanceOfByPartition(address[],address[])": FunctionFragment;
    "batchTotalPartitions(address[])": FunctionFragment;
    "batchDefaultPartitions(address[])": FunctionFragment;
    "batchValidations(address[],address[])": FunctionFragment;
    "batchAllowlisted(address[],address[])": FunctionFragment;
    "batchBlocklisted(address[],address[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "canImplementInterfaceForAddress",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "batchTokenSuppliesInfos",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchTokenRolesInfos",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchControllers",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchExtensionControllers",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchTokenExtensionSetup",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchTokenExtensionSetup1",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchTokenExtensionSetup2",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchERC1400Balances",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchERC20Balances",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchEthBalance",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchERC721Balances",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchBalanceOf",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchBalanceOfByPartition",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSpendableBalanceOfByPartition",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchTotalPartitions",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchDefaultPartitions",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchValidations",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchAllowlisted",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchBlocklisted",
    values: [string[], string[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "canImplementInterfaceForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchTokenSuppliesInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchTokenRolesInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchControllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchExtensionControllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchTokenExtensionSetup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchTokenExtensionSetup1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchTokenExtensionSetup2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchERC1400Balances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchERC20Balances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchEthBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchERC721Balances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchBalanceOfByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSpendableBalanceOfByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchTotalPartitions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchDefaultPartitions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchValidations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchAllowlisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchBlocklisted",
    data: BytesLike
  ): Result;

  events: {};
}

export interface BatchReader extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BatchReaderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Get batch of token supplies.
     */
    batchTokenSuppliesInfos(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], string[], BigNumber[], BigNumber[], string[]]
    >;

    /**
     * Get batch of token roles.
     */
    batchTokenRolesInfos(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[], string[], BigNumber[], string[]]>;

    /**
     * Get batch of token controllers.
     */
    batchControllers(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[], string[]]>;

    /**
     * Get batch of token extension controllers.
     */
    batchExtensionControllers(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[], string[]]>;

    /**
     * Get batch of token extension setup.
     */
    batchTokenExtensionSetup(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [string[], number[], boolean[], boolean[], boolean[], boolean[]]
    >;

    /**
     * Get batch of token extension setup (part 1).
     */
    batchTokenExtensionSetup1(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[string[], number[], boolean[], boolean[]]>;

    /**
     * Get batch of token extension setup (part 2).
     */
    batchTokenExtensionSetup2(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[boolean[], boolean[]]>;

    /**
     * Get batch of ERC1400 balances.
     */
    batchERC1400Balances(
      tokens: string[],
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        BigNumber[],
        BigNumber[],
        string[],
        BigNumber[],
        BigNumber[]
      ]
    >;

    /**
     * Get batch of ERC20 balances.
     */
    batchERC20Balances(
      tokens: string[],
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[]]>;

    /**
     * Get batch of ETH balances.
     */
    batchEthBalance(
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    /**
     * Get batch of ERC721 balances.
     */
    batchERC721Balances(
      tokens: string[],
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[][][]]>;

    /**
     * Get batch of token balances.
     */
    batchBalanceOf(
      tokens: string[],
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    /**
     * Get batch of partition balances.
     */
    batchBalanceOfByPartition(
      tokens: string[],
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[], string[], BigNumber[]]>;

    /**
     * Get batch of spendable partition balances.
     */
    batchSpendableBalanceOfByPartition(
      tokens: string[],
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[], string[], BigNumber[]]>;

    /**
     * Get batch of token partitions.
     */
    batchTotalPartitions(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[], string[], BigNumber[]]>;

    /**
     * Get batch of token default partitions.
     */
    batchDefaultPartitions(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[], string[]]>;

    /**
     * Get batch of validation status.
     */
    batchValidations(
      tokens: string[],
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<[boolean[], boolean[]]>;

    /**
     * Get batch of allowlisted status.
     */
    batchAllowlisted(
      tokens: string[],
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<[boolean[]]>;

    /**
     * Get batch of blocklisted status.
     */
    batchBlocklisted(
      tokens: string[],
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<[boolean[]]>;
  };

  canImplementInterfaceForAddress(
    interfaceHash: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Get batch of token supplies.
   */
  batchTokenSuppliesInfos(
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[], string[], BigNumber[], BigNumber[], string[]]
  >;

  /**
   * Get batch of token roles.
   */
  batchTokenRolesInfos(
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[], string[], BigNumber[], string[]]>;

  /**
   * Get batch of token controllers.
   */
  batchControllers(
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<[BigNumber[], string[]]>;

  /**
   * Get batch of token extension controllers.
   */
  batchExtensionControllers(
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<[BigNumber[], string[]]>;

  /**
   * Get batch of token extension setup.
   */
  batchTokenExtensionSetup(
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<[string[], number[], boolean[], boolean[], boolean[], boolean[]]>;

  /**
   * Get batch of token extension setup (part 1).
   */
  batchTokenExtensionSetup1(
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<[string[], number[], boolean[], boolean[]]>;

  /**
   * Get batch of token extension setup (part 2).
   */
  batchTokenExtensionSetup2(
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<[boolean[], boolean[]]>;

  /**
   * Get batch of ERC1400 balances.
   */
  batchERC1400Balances(
    tokens: string[],
    tokenHolders: string[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[], BigNumber[], string[], BigNumber[], BigNumber[]]
  >;

  /**
   * Get batch of ERC20 balances.
   */
  batchERC20Balances(
    tokens: string[],
    tokenHolders: string[],
    overrides?: CallOverrides
  ): Promise<[BigNumber[], BigNumber[]]>;

  /**
   * Get batch of ETH balances.
   */
  batchEthBalance(
    tokenHolders: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  /**
   * Get batch of ERC721 balances.
   */
  batchERC721Balances(
    tokens: string[],
    tokenHolders: string[],
    overrides?: CallOverrides
  ): Promise<[BigNumber[], BigNumber[][][]]>;

  /**
   * Get batch of token balances.
   */
  batchBalanceOf(
    tokens: string[],
    tokenHolders: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  /**
   * Get batch of partition balances.
   */
  batchBalanceOfByPartition(
    tokens: string[],
    tokenHolders: string[],
    overrides?: CallOverrides
  ): Promise<[BigNumber[], string[], BigNumber[]]>;

  /**
   * Get batch of spendable partition balances.
   */
  batchSpendableBalanceOfByPartition(
    tokens: string[],
    tokenHolders: string[],
    overrides?: CallOverrides
  ): Promise<[BigNumber[], string[], BigNumber[]]>;

  /**
   * Get batch of token partitions.
   */
  batchTotalPartitions(
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<[BigNumber[], string[], BigNumber[]]>;

  /**
   * Get batch of token default partitions.
   */
  batchDefaultPartitions(
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<[BigNumber[], string[]]>;

  /**
   * Get batch of validation status.
   */
  batchValidations(
    tokens: string[],
    tokenHolders: string[],
    overrides?: CallOverrides
  ): Promise<[boolean[], boolean[]]>;

  /**
   * Get batch of allowlisted status.
   */
  batchAllowlisted(
    tokens: string[],
    tokenHolders: string[],
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  /**
   * Get batch of blocklisted status.
   */
  batchBlocklisted(
    tokens: string[],
    tokenHolders: string[],
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  callStatic: {
    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Get batch of token supplies.
     */
    batchTokenSuppliesInfos(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], string[], BigNumber[], BigNumber[], string[]]
    >;

    /**
     * Get batch of token roles.
     */
    batchTokenRolesInfos(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[], string[], BigNumber[], string[]]>;

    /**
     * Get batch of token controllers.
     */
    batchControllers(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[], string[]]>;

    /**
     * Get batch of token extension controllers.
     */
    batchExtensionControllers(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[], string[]]>;

    /**
     * Get batch of token extension setup.
     */
    batchTokenExtensionSetup(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [string[], number[], boolean[], boolean[], boolean[], boolean[]]
    >;

    /**
     * Get batch of token extension setup (part 1).
     */
    batchTokenExtensionSetup1(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[string[], number[], boolean[], boolean[]]>;

    /**
     * Get batch of token extension setup (part 2).
     */
    batchTokenExtensionSetup2(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[boolean[], boolean[]]>;

    /**
     * Get batch of ERC1400 balances.
     */
    batchERC1400Balances(
      tokens: string[],
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        BigNumber[],
        BigNumber[],
        string[],
        BigNumber[],
        BigNumber[]
      ]
    >;

    /**
     * Get batch of ERC20 balances.
     */
    batchERC20Balances(
      tokens: string[],
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[]]>;

    /**
     * Get batch of ETH balances.
     */
    batchEthBalance(
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    /**
     * Get batch of ERC721 balances.
     */
    batchERC721Balances(
      tokens: string[],
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[][][]]>;

    /**
     * Get batch of token balances.
     */
    batchBalanceOf(
      tokens: string[],
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    /**
     * Get batch of partition balances.
     */
    batchBalanceOfByPartition(
      tokens: string[],
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[], string[], BigNumber[]]>;

    /**
     * Get batch of spendable partition balances.
     */
    batchSpendableBalanceOfByPartition(
      tokens: string[],
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[], string[], BigNumber[]]>;

    /**
     * Get batch of token partitions.
     */
    batchTotalPartitions(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[], string[], BigNumber[]]>;

    /**
     * Get batch of token default partitions.
     */
    batchDefaultPartitions(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[], string[]]>;

    /**
     * Get batch of validation status.
     */
    batchValidations(
      tokens: string[],
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<[boolean[], boolean[]]>;

    /**
     * Get batch of allowlisted status.
     */
    batchAllowlisted(
      tokens: string[],
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    /**
     * Get batch of blocklisted status.
     */
    batchBlocklisted(
      tokens: string[],
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;
  };

  filters: {};

  estimateGas: {
    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get batch of token supplies.
     */
    batchTokenSuppliesInfos(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get batch of token roles.
     */
    batchTokenRolesInfos(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get batch of token controllers.
     */
    batchControllers(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get batch of token extension controllers.
     */
    batchExtensionControllers(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get batch of token extension setup.
     */
    batchTokenExtensionSetup(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get batch of token extension setup (part 1).
     */
    batchTokenExtensionSetup1(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get batch of token extension setup (part 2).
     */
    batchTokenExtensionSetup2(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get batch of ERC1400 balances.
     */
    batchERC1400Balances(
      tokens: string[],
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get batch of ERC20 balances.
     */
    batchERC20Balances(
      tokens: string[],
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get batch of ETH balances.
     */
    batchEthBalance(
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get batch of ERC721 balances.
     */
    batchERC721Balances(
      tokens: string[],
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get batch of token balances.
     */
    batchBalanceOf(
      tokens: string[],
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get batch of partition balances.
     */
    batchBalanceOfByPartition(
      tokens: string[],
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get batch of spendable partition balances.
     */
    batchSpendableBalanceOfByPartition(
      tokens: string[],
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get batch of token partitions.
     */
    batchTotalPartitions(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get batch of token default partitions.
     */
    batchDefaultPartitions(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get batch of validation status.
     */
    batchValidations(
      tokens: string[],
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get batch of allowlisted status.
     */
    batchAllowlisted(
      tokens: string[],
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get batch of blocklisted status.
     */
    batchBlocklisted(
      tokens: string[],
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get batch of token supplies.
     */
    batchTokenSuppliesInfos(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get batch of token roles.
     */
    batchTokenRolesInfos(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get batch of token controllers.
     */
    batchControllers(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get batch of token extension controllers.
     */
    batchExtensionControllers(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get batch of token extension setup.
     */
    batchTokenExtensionSetup(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get batch of token extension setup (part 1).
     */
    batchTokenExtensionSetup1(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get batch of token extension setup (part 2).
     */
    batchTokenExtensionSetup2(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get batch of ERC1400 balances.
     */
    batchERC1400Balances(
      tokens: string[],
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get batch of ERC20 balances.
     */
    batchERC20Balances(
      tokens: string[],
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get batch of ETH balances.
     */
    batchEthBalance(
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get batch of ERC721 balances.
     */
    batchERC721Balances(
      tokens: string[],
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get batch of token balances.
     */
    batchBalanceOf(
      tokens: string[],
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get batch of partition balances.
     */
    batchBalanceOfByPartition(
      tokens: string[],
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get batch of spendable partition balances.
     */
    batchSpendableBalanceOfByPartition(
      tokens: string[],
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get batch of token partitions.
     */
    batchTotalPartitions(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get batch of token default partitions.
     */
    batchDefaultPartitions(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get batch of validation status.
     */
    batchValidations(
      tokens: string[],
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get batch of allowlisted status.
     */
    batchAllowlisted(
      tokens: string[],
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get batch of blocklisted status.
     */
    batchBlocklisted(
      tokens: string[],
      tokenHolders: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
