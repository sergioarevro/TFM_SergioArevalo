/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type ValidateDataStruct = {
  token: string;
  payload: BytesLike;
  partition: BytesLike;
  operator: string;
  from: string;
  to: string;
  value: BigNumberish;
  data: BytesLike;
  operatorData: BytesLike;
};

export type ValidateDataStructOutput = [
  string,
  string,
  string,
  string,
  string,
  string,
  BigNumber,
  string,
  string
] & {
  token: string;
  payload: string;
  partition: string;
  operator: string;
  from: string;
  to: string;
  value: BigNumber;
  data: string;
  operatorData: string;
};

export interface IERC1400TokensValidatorInterface extends utils.Interface {
  functions: {
    "canValidate((address,bytes,bytes32,address,address,address,uint256,bytes,bytes))": FunctionFragment;
    "tokensToValidate(bytes,bytes32,address,address,address,uint256,bytes,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "canValidate",
    values: [ValidateDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensToValidate",
    values: [
      BytesLike,
      BytesLike,
      string,
      string,
      string,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "canValidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensToValidate",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IERC1400TokensValidator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IERC1400TokensValidatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    canValidate(
      data: ValidateDataStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokensToValidate(
      payload: BytesLike,
      partition: BytesLike,
      operator: string,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  canValidate(
    data: ValidateDataStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokensToValidate(
    payload: BytesLike,
    partition: BytesLike,
    operator: string,
    from: string,
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    canValidate(
      data: ValidateDataStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokensToValidate(
      payload: BytesLike,
      partition: BytesLike,
      operator: string,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    canValidate(
      data: ValidateDataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensToValidate(
      payload: BytesLike,
      partition: BytesLike,
      operator: string,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    canValidate(
      data: ValidateDataStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensToValidate(
      payload: BytesLike,
      partition: BytesLike,
      operator: string,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
