/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IERC1643Interface extends utils.Interface {
  functions: {
    "getDocument(bytes32)": FunctionFragment;
    "setDocument(bytes32,string,bytes32)": FunctionFragment;
    "removeDocument(bytes32)": FunctionFragment;
    "getAllDocuments()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getDocument",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDocument",
    values: [BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDocument",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllDocuments",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllDocuments",
    data: BytesLike
  ): Result;

  events: {
    "DocumentRemoved(bytes32,string,bytes32)": EventFragment;
    "DocumentUpdated(bytes32,string,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DocumentRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DocumentUpdated"): EventFragment;
}

export type DocumentRemovedEvent = TypedEvent<
  [string, string, string],
  { name: string; uri: string; documentHash: string }
>;

export type DocumentRemovedEventFilter = TypedEventFilter<DocumentRemovedEvent>;

export type DocumentUpdatedEvent = TypedEvent<
  [string, string, string],
  { name: string; uri: string; documentHash: string }
>;

export type DocumentUpdatedEventFilter = TypedEventFilter<DocumentUpdatedEvent>;

export interface IERC1643 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IERC1643Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getDocument(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber]>;

    setDocument(
      _name: BytesLike,
      _uri: string,
      _documentHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeDocument(
      _name: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllDocuments(overrides?: CallOverrides): Promise<[string[]]>;
  };

  getDocument(
    _name: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string, BigNumber]>;

  setDocument(
    _name: BytesLike,
    _uri: string,
    _documentHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeDocument(
    _name: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllDocuments(overrides?: CallOverrides): Promise<string[]>;

  callStatic: {
    getDocument(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber]>;

    setDocument(
      _name: BytesLike,
      _uri: string,
      _documentHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeDocument(_name: BytesLike, overrides?: CallOverrides): Promise<void>;

    getAllDocuments(overrides?: CallOverrides): Promise<string[]>;
  };

  filters: {
    "DocumentRemoved(bytes32,string,bytes32)"(
      name?: BytesLike | null,
      uri?: null,
      documentHash?: null
    ): DocumentRemovedEventFilter;
    DocumentRemoved(
      name?: BytesLike | null,
      uri?: null,
      documentHash?: null
    ): DocumentRemovedEventFilter;

    "DocumentUpdated(bytes32,string,bytes32)"(
      name?: BytesLike | null,
      uri?: null,
      documentHash?: null
    ): DocumentUpdatedEventFilter;
    DocumentUpdated(
      name?: BytesLike | null,
      uri?: null,
      documentHash?: null
    ): DocumentUpdatedEventFilter;
  };

  estimateGas: {
    getDocument(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDocument(
      _name: BytesLike,
      _uri: string,
      _documentHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeDocument(
      _name: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllDocuments(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getDocument(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDocument(
      _name: BytesLike,
      _uri: string,
      _documentHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeDocument(
      _name: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllDocuments(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
